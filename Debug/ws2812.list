
ws2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000616c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08006424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002f0  24000010  08006434  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000300  08006434  00020300  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e410  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001bd6  00000000  00000000  0002e44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000c68  00000000  00000000  00030028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ba0  00000000  00000000  00030c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035f40  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f789  00000000  00000000  00067770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015be19  00000000  00000000  00076ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d2d12  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003404  00000000  00000000  001d2d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080063ec 	.word	0x080063ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080063ec 	.word	0x080063ec

080002d8 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80002e0:	2100      	movs	r1, #0
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80002e4:	f004 ff2c 	bl	8005140 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	2400002c 	.word	0x2400002c
 80002fc:	24000110 	.word	0x24000110

08000300 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
 800030c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	b2d9      	uxtb	r1, r3
 8000312:	4a11      	ldr	r2, [pc, #68]	; (8000358 <Set_LED+0x58>)
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	b2d9      	uxtb	r1, r3
 800031e:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <Set_LED+0x58>)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	460a      	mov	r2, r1
 8000328:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	b2d9      	uxtb	r1, r3
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <Set_LED+0x58>)
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	4413      	add	r3, r2
 8000336:	460a      	mov	r2, r1
 8000338:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	4a06      	ldr	r2, [pc, #24]	; (8000358 <Set_LED+0x58>)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	460a      	mov	r2, r1
 8000348:	70da      	strb	r2, [r3, #3]
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	240000f0 	.word	0x240000f0

0800035c <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
 800037e:	e036      	b.n	80003ee <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000380:	4a2e      	ldr	r2, [pc, #184]	; (800043c <WS2812_Send+0xcc>)
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	4413      	add	r3, r2
 8000388:	785b      	ldrb	r3, [r3, #1]
 800038a:	041a      	lsls	r2, r3, #16
 800038c:	492b      	ldr	r1, [pc, #172]	; (800043c <WS2812_Send+0xcc>)
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	440b      	add	r3, r1
 8000394:	789b      	ldrb	r3, [r3, #2]
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	431a      	orrs	r2, r3
 800039a:	4928      	ldr	r1, [pc, #160]	; (800043c <WS2812_Send+0xcc>)
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	78db      	ldrb	r3, [r3, #3]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 80003a8:	2317      	movs	r3, #23
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e019      	b.n	80003e2 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80003ae:	2201      	movs	r2, #1
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	fa02 f303 	lsl.w	r3, r2, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4013      	ands	r3, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d005      	beq.n	80003cc <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // /3 of 90
 80003c0:	4a1f      	ldr	r2, [pc, #124]	; (8000440 <WS2812_Send+0xd0>)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	213c      	movs	r1, #60	; 0x3c
 80003c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003ca:	e004      	b.n	80003d6 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <WS2812_Send+0xd0>)
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	211e      	movs	r1, #30
 80003d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	3301      	adds	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3b01      	subs	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	dae2      	bge.n	80003ae <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	3301      	adds	r3, #1
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	2b07      	cmp	r3, #7
 80003f2:	ddc5      	ble.n	8000380 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	e00a      	b.n	8000410 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <WS2812_Send+0xd0>)
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	2100      	movs	r1, #0
 8000400:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	3301      	adds	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	3301      	adds	r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	2b31      	cmp	r3, #49	; 0x31
 8000414:	ddf1      	ble.n	80003fa <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	b29b      	uxth	r3, r3
 800041a:	4a09      	ldr	r2, [pc, #36]	; (8000440 <WS2812_Send+0xd0>)
 800041c:	2100      	movs	r1, #0
 800041e:	4809      	ldr	r0, [pc, #36]	; (8000444 <WS2812_Send+0xd4>)
 8000420:	f004 fc68 	bl	8004cf4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000424:	bf00      	nop
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <WS2812_Send+0xd8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0fb      	beq.n	8000426 <WS2812_Send+0xb6>
	datasentflag = 0;
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <WS2812_Send+0xd8>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
}
 8000434:	bf00      	nop
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	240000f0 	.word	0x240000f0
 8000440:	24000114 	.word	0x24000114
 8000444:	2400002c 	.word	0x2400002c
 8000448:	24000110 	.word	0x24000110
 800044c:	00000000 	.word	0x00000000

08000450 <rainbow_effect_right>:
  return 0x01;
}



uint8_t rainbow_effect_right() {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
    // Colors: 3 (255.0.0, 0.255.0, 0.0.255)
    // Options: rainbowlen=8, toLeft=false,
//  if(millis() - strip_0.effStart < 30 * (strip_0.effStep)) return 0x00;
  float factor1, factor2;
  uint16_t ind;
  for(uint16_t j=0;j<8;j++) {
 8000456:	2300      	movs	r3, #0
 8000458:	81fb      	strh	r3, [r7, #14]
 800045a:	e1df      	b.n	800081c <rainbow_effect_right+0x3cc>
    ind = 14 - (int16_t)(effStep - j * 1.75) % 14;
 800045c:	4ba6      	ldr	r3, [pc, #664]	; (80006f8 <rainbow_effect_right+0x2a8>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	ee07 3a90 	vmov	s15, r3
 8000464:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000468:	89fb      	ldrh	r3, [r7, #14]
 800046a:	ee07 3a90 	vmov	s15, r3
 800046e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000472:	eeb7 5b0c 	vmov.f64	d5, #124	; 0x3fe00000  1.750
 8000476:	ee27 7b05 	vmul.f64	d7, d7, d5
 800047a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800047e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000482:	ee17 3a90 	vmov	r3, s15
 8000486:	b21a      	sxth	r2, r3
 8000488:	4b9c      	ldr	r3, [pc, #624]	; (80006fc <rainbow_effect_right+0x2ac>)
 800048a:	fb83 1302 	smull	r1, r3, r3, r2
 800048e:	4413      	add	r3, r2
 8000490:	10d9      	asrs	r1, r3, #3
 8000492:	17d3      	asrs	r3, r2, #31
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	460b      	mov	r3, r1
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	1a5b      	subs	r3, r3, r1
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	b21b      	sxth	r3, r3
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	f1c3 030e 	rsb	r3, r3, #14
 80004a8:	81bb      	strh	r3, [r7, #12]
    switch((int)((ind % 14) / 4.666666666666667)) {
 80004aa:	89ba      	ldrh	r2, [r7, #12]
 80004ac:	0853      	lsrs	r3, r2, #1
 80004ae:	4993      	ldr	r1, [pc, #588]	; (80006fc <rainbow_effect_right+0x2ac>)
 80004b0:	fba1 1303 	umull	r1, r3, r1, r3
 80004b4:	0899      	lsrs	r1, r3, #2
 80004b6:	460b      	mov	r3, r1
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	1a5b      	subs	r3, r3, r1
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	ee07 3a90 	vmov	s15, r3
 80004c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80004ca:	ed9f 5b89 	vldr	d5, [pc, #548]	; 80006f0 <rainbow_effect_right+0x2a0>
 80004ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80004d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80004d6:	ee17 3a90 	vmov	r3, s15
 80004da:	2b02      	cmp	r3, #2
 80004dc:	f000 8114 	beq.w	8000708 <rainbow_effect_right+0x2b8>
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	f300 8198 	bgt.w	8000816 <rainbow_effect_right+0x3c6>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d002      	beq.n	80004f0 <rainbow_effect_right+0xa0>
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d077      	beq.n	80005de <rainbow_effect_right+0x18e>
 80004ee:	e192      	b.n	8000816 <rainbow_effect_right+0x3c6>
      case 0: factor1 = 1.0 - ((float)(ind % 14 - 0 * 4.666666666666667) / 4.666666666666667);
 80004f0:	89ba      	ldrh	r2, [r7, #12]
 80004f2:	0853      	lsrs	r3, r2, #1
 80004f4:	4981      	ldr	r1, [pc, #516]	; (80006fc <rainbow_effect_right+0x2ac>)
 80004f6:	fba1 1303 	umull	r1, r3, r1, r3
 80004fa:	0899      	lsrs	r1, r3, #2
 80004fc:	460b      	mov	r3, r1
 80004fe:	00db      	lsls	r3, r3, #3
 8000500:	1a5b      	subs	r3, r3, r1
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	b29b      	uxth	r3, r3
 8000508:	ee07 3a90 	vmov	s15, r3
 800050c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000510:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000514:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000518:	ed9f 5b75 	vldr	d5, [pc, #468]	; 80006f0 <rainbow_effect_right+0x2a0>
 800051c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000520:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000524:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000528:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800052c:	edc7 7a02 	vstr	s15, [r7, #8]
              factor2 = (float)((int)(ind - 0) % 14) / 4.666666666666667;
 8000530:	89ba      	ldrh	r2, [r7, #12]
 8000532:	4b72      	ldr	r3, [pc, #456]	; (80006fc <rainbow_effect_right+0x2ac>)
 8000534:	fb83 1302 	smull	r1, r3, r3, r2
 8000538:	4413      	add	r3, r2
 800053a:	10d9      	asrs	r1, r3, #3
 800053c:	17d3      	asrs	r3, r2, #31
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	460b      	mov	r3, r1
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	1a5b      	subs	r3, r3, r1
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	1ad1      	subs	r1, r2, r3
 800054a:	ee07 1a90 	vmov	s15, r1
 800054e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000552:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000556:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80006f0 <rainbow_effect_right+0x2a0>
 800055a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800055e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000562:	edc7 7a01 	vstr	s15, [r7, #4]
              Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
 8000566:	89f8      	ldrh	r0, [r7, #14]
 8000568:	edd7 7a02 	vldr	s15, [r7, #8]
 800056c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000700 <rainbow_effect_right+0x2b0>
 8000570:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000574:	edd7 7a01 	vldr	s15, [r7, #4]
 8000578:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000704 <rainbow_effect_right+0x2b4>
 800057c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000584:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000588:	edd7 7a02 	vldr	s15, [r7, #8]
 800058c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000704 <rainbow_effect_right+0x2b4>
 8000590:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000594:	edd7 7a01 	vldr	s15, [r7, #4]
 8000598:	eddf 6a59 	vldr	s13, [pc, #356]	; 8000700 <rainbow_effect_right+0x2b0>
 800059c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80005a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005a4:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 80005a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80005ac:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000704 <rainbow_effect_right+0x2b4>
 80005b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80005b8:	eddf 6a52 	vldr	s13, [pc, #328]	; 8000704 <rainbow_effect_right+0x2b4>
 80005bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80005c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005c8:	ee17 3a90 	vmov	r3, s15
 80005cc:	ee15 2a90 	vmov	r2, s11
 80005d0:	ee16 1a10 	vmov	r1, s12
 80005d4:	f7ff fe94 	bl	8000300 <Set_LED>
              WS2812_Send();
 80005d8:	f7ff feca 	bl	8000370 <WS2812_Send>
              break;
 80005dc:	e11b      	b.n	8000816 <rainbow_effect_right+0x3c6>
      case 1: factor1 = 1.0 - ((float)(ind % 14 - 1 * 4.666666666666667) / 4.666666666666667);
 80005de:	89ba      	ldrh	r2, [r7, #12]
 80005e0:	0853      	lsrs	r3, r2, #1
 80005e2:	4946      	ldr	r1, [pc, #280]	; (80006fc <rainbow_effect_right+0x2ac>)
 80005e4:	fba1 1303 	umull	r1, r3, r1, r3
 80005e8:	0899      	lsrs	r1, r3, #2
 80005ea:	460b      	mov	r3, r1
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	1a5b      	subs	r3, r3, r1
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80005fe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80006f0 <rainbow_effect_right+0x2a0>
 8000602:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000606:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800060a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800060e:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80006f0 <rainbow_effect_right+0x2a0>
 8000612:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000616:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800061a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800061e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000622:	edc7 7a02 	vstr	s15, [r7, #8]
              factor2 = (float)((int)(ind - 4.666666666666667) % 14) / 4.666666666666667;
 8000626:	89bb      	ldrh	r3, [r7, #12]
 8000628:	ee07 3a90 	vmov	s15, r3
 800062c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000630:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80006f0 <rainbow_effect_right+0x2a0>
 8000634:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000638:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800063c:	ee17 2a90 	vmov	r2, s15
 8000640:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <rainbow_effect_right+0x2ac>)
 8000642:	fb83 1302 	smull	r1, r3, r3, r2
 8000646:	4413      	add	r3, r2
 8000648:	10d9      	asrs	r1, r3, #3
 800064a:	17d3      	asrs	r3, r2, #31
 800064c:	1ac9      	subs	r1, r1, r3
 800064e:	460b      	mov	r3, r1
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	1a5b      	subs	r3, r3, r1
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	1ad1      	subs	r1, r2, r3
 8000658:	ee07 1a90 	vmov	s15, r1
 800065c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000660:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000664:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80006f0 <rainbow_effect_right+0x2a0>
 8000668:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800066c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000670:	edc7 7a01 	vstr	s15, [r7, #4]
              Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 8000674:	89f8      	ldrh	r0, [r7, #14]
 8000676:	edd7 7a02 	vldr	s15, [r7, #8]
 800067a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000704 <rainbow_effect_right+0x2b4>
 800067e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000682:	edd7 7a01 	vldr	s15, [r7, #4]
 8000686:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000704 <rainbow_effect_right+0x2b4>
 800068a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800068e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000692:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000696:	edd7 7a02 	vldr	s15, [r7, #8]
 800069a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000700 <rainbow_effect_right+0x2b0>
 800069e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006a6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000704 <rainbow_effect_right+0x2b4>
 80006aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b2:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 80006b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006ba:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000704 <rainbow_effect_right+0x2b4>
 80006be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000700 <rainbow_effect_right+0x2b0>
 80006ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d6:	ee17 3a90 	vmov	r3, s15
 80006da:	ee15 2a90 	vmov	r2, s11
 80006de:	ee16 1a10 	vmov	r1, s12
 80006e2:	f7ff fe0d 	bl	8000300 <Set_LED>
              WS2812_Send();
 80006e6:	f7ff fe43 	bl	8000370 <WS2812_Send>
              break;
 80006ea:	e094      	b.n	8000816 <rainbow_effect_right+0x3c6>
 80006ec:	f3af 8000 	nop.w
 80006f0:	aaaaaaab 	.word	0xaaaaaaab
 80006f4:	4012aaaa 	.word	0x4012aaaa
 80006f8:	240002f8 	.word	0x240002f8
 80006fc:	92492493 	.word	0x92492493
 8000700:	437f0000 	.word	0x437f0000
 8000704:	00000000 	.word	0x00000000
      case 2: factor1 = 1.0 - ((float)(ind % 14 - 2 * 4.666666666666667) / 4.666666666666667);
 8000708:	89ba      	ldrh	r2, [r7, #12]
 800070a:	0853      	lsrs	r3, r2, #1
 800070c:	4954      	ldr	r1, [pc, #336]	; (8000860 <rainbow_effect_right+0x410>)
 800070e:	fba1 1303 	umull	r1, r3, r1, r3
 8000712:	0899      	lsrs	r1, r3, #2
 8000714:	460b      	mov	r3, r1
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	ee07 3a90 	vmov	s15, r3
 8000724:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000728:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8000850 <rainbow_effect_right+0x400>
 800072c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000730:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000734:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000738:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8000858 <rainbow_effect_right+0x408>
 800073c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000740:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000744:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000748:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800074c:	edc7 7a02 	vstr	s15, [r7, #8]
              factor2 = (float)((int)(ind - 9.333333333333334) % 14) / 4.666666666666667;
 8000750:	89bb      	ldrh	r3, [r7, #12]
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800075a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000850 <rainbow_effect_right+0x400>
 800075e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000762:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000766:	ee17 2a90 	vmov	r2, s15
 800076a:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <rainbow_effect_right+0x410>)
 800076c:	fb83 1302 	smull	r1, r3, r3, r2
 8000770:	4413      	add	r3, r2
 8000772:	10d9      	asrs	r1, r3, #3
 8000774:	17d3      	asrs	r3, r2, #31
 8000776:	1ac9      	subs	r1, r1, r3
 8000778:	460b      	mov	r3, r1
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	1a5b      	subs	r3, r3, r1
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	1ad1      	subs	r1, r2, r3
 8000782:	ee07 1a90 	vmov	s15, r1
 8000786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800078e:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000858 <rainbow_effect_right+0x408>
 8000792:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000796:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800079a:	edc7 7a01 	vstr	s15, [r7, #4]
              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 800079e:	89f8      	ldrh	r0, [r7, #14]
 80007a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80007a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000864 <rainbow_effect_right+0x414>
 80007a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80007b0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000868 <rainbow_effect_right+0x418>
 80007b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007bc:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80007c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80007c4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000864 <rainbow_effect_right+0x414>
 80007c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80007d0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000864 <rainbow_effect_right+0x414>
 80007d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007dc:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 80007e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80007e4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000868 <rainbow_effect_right+0x418>
 80007e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80007f0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000864 <rainbow_effect_right+0x414>
 80007f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000800:	ee17 3a90 	vmov	r3, s15
 8000804:	ee15 2a90 	vmov	r2, s11
 8000808:	ee16 1a10 	vmov	r1, s12
 800080c:	f7ff fd78 	bl	8000300 <Set_LED>
              WS2812_Send();
 8000810:	f7ff fdae 	bl	8000370 <WS2812_Send>
              break;
 8000814:	bf00      	nop
  for(uint16_t j=0;j<8;j++) {
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	3301      	adds	r3, #1
 800081a:	81fb      	strh	r3, [r7, #14]
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	2b07      	cmp	r3, #7
 8000820:	f67f ae1c 	bls.w	800045c <rainbow_effect_right+0xc>
    }
  }
  if(effStep >= 14) {effStep = 0; return 0x03; }
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <rainbow_effect_right+0x41c>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	2b0d      	cmp	r3, #13
 800082a:	d904      	bls.n	8000836 <rainbow_effect_right+0x3e6>
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <rainbow_effect_right+0x41c>)
 800082e:	2200      	movs	r2, #0
 8000830:	801a      	strh	r2, [r3, #0]
 8000832:	2303      	movs	r3, #3
 8000834:	e006      	b.n	8000844 <rainbow_effect_right+0x3f4>
  else effStep++;
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <rainbow_effect_right+0x41c>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	b29a      	uxth	r2, r3
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <rainbow_effect_right+0x41c>)
 8000840:	801a      	strh	r2, [r3, #0]
  return 0x01;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	f3af 8000 	nop.w
 8000850:	aaaaaaab 	.word	0xaaaaaaab
 8000854:	4022aaaa 	.word	0x4022aaaa
 8000858:	aaaaaaab 	.word	0xaaaaaaab
 800085c:	4012aaaa 	.word	0x4012aaaa
 8000860:	92492493 	.word	0x92492493
 8000864:	00000000 	.word	0x00000000
 8000868:	437f0000 	.word	0x437f0000
 800086c:	240002f8 	.word	0x240002f8

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fb22 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f818 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f000 f95e 	bl	8000b3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000880:	f000 f93c 	bl	8000afc <MX_DMA_Init>
  MX_TIM1_Init();
 8000884:	f000 f88e 	bl	80009a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Set_LED(0, 255, 0, 0);
 8000888:	2300      	movs	r3, #0
 800088a:	2200      	movs	r2, #0
 800088c:	21ff      	movs	r1, #255	; 0xff
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fd36 	bl	8000300 <Set_LED>
  //Set_LED(3, 46, 89, 128);
  //Set_LED(4, 156, 233, 100);
  //Set_LED(5, 102, 0, 235);
  //Set_LED(6, 47, 38, 77);
  //Set_LED(7, 255, 200, 0);
  Set_Brightness(10);
 8000894:	200a      	movs	r0, #10
 8000896:	f7ff fd61 	bl	800035c <Set_Brightness>
  WS2812_Send();
 800089a:	f7ff fd69 	bl	8000370 <WS2812_Send>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  rainbow_effect_right();
 800089e:	f7ff fdd7 	bl	8000450 <rainbow_effect_right>
	  HAL_Delay(30);
 80008a2:	201e      	movs	r0, #30
 80008a4:	f000 fb9c 	bl	8000fe0 <HAL_Delay>
	  rainbow_effect_right();
 80008a8:	e7f9      	b.n	800089e <main+0x2e>
	...

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fd8e 	bl	80063dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 fd88 	bl	80063dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f003 f995 	bl	8003bfc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <SystemClock_Config+0xf0>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	4a30      	ldr	r2, [pc, #192]	; (800099c <SystemClock_Config+0xf0>)
 80008dc:	f023 0301 	bic.w	r3, r3, #1
 80008e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <SystemClock_Config+0xf0>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <SystemClock_Config+0xf4>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f4:	4a2a      	ldr	r2, [pc, #168]	; (80009a0 <SystemClock_Config+0xf4>)
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <SystemClock_Config+0xf4>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000908:	bf00      	nop
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <SystemClock_Config+0xf4>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000916:	d1f8      	bne.n	800090a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000918:	2301      	movs	r3, #1
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	2302      	movs	r3, #2
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800092a:	2305      	movs	r3, #5
 800092c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800092e:	2360      	movs	r3, #96	; 0x60
 8000930:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800093e:	2308      	movs	r3, #8
 8000940:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000942:	2300      	movs	r3, #0
 8000944:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4618      	mov	r0, r3
 8000950:	f003 f98e 	bl	8003c70 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800095a:	f000 f919 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	233f      	movs	r3, #63	; 0x3f
 8000960:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2303      	movs	r3, #3
 8000964:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800096a:	2308      	movs	r3, #8
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2102      	movs	r1, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fdce 	bl	8004524 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800098e:	f000 f8ff 	bl	8000b90 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3770      	adds	r7, #112	; 0x70
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	58000400 	.word	0x58000400
 80009a0:	58024800 	.word	0x58024800

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09a      	sub	sp, #104	; 0x68
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
 80009d4:	615a      	str	r2, [r3, #20]
 80009d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	222c      	movs	r2, #44	; 0x2c
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 fcfc 	bl	80063dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <MX_TIM1_Init+0x150>)
 80009e6:	4a44      	ldr	r2, [pc, #272]	; (8000af8 <MX_TIM1_Init+0x154>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ea:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <MX_TIM1_Init+0x150>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <MX_TIM1_Init+0x150>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300-1;
 80009f6:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <MX_TIM1_Init+0x150>)
 80009f8:	f240 122b 	movw	r2, #299	; 0x12b
 80009fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a10:	4838      	ldr	r0, [pc, #224]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000a12:	f004 f8b7 	bl	8004b84 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 f8b8 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4831      	ldr	r0, [pc, #196]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000a2e:	f004 fd93 	bl	8005558 <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a38:	f000 f8aa 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3c:	482d      	ldr	r0, [pc, #180]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000a3e:	f004 f8f8 	bl	8004c32 <HAL_TIM_PWM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a48:	f000 f8a2 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4825      	ldr	r0, [pc, #148]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000a60:	f005 fb8c 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a6a:	f000 f891 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000a94:	f004 fc4c 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a9e:	f000 f877 	bl	8000b90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000ad8:	f005 fbde 	bl	8006298 <HAL_TIMEx_ConfigBreakDeadTime>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000ae2:	f000 f855 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <MX_TIM1_Init+0x150>)
 8000ae8:	f000 f8c6 	bl	8000c78 <HAL_TIM_MspPostInit>

}
 8000aec:	bf00      	nop
 8000aee:	3768      	adds	r7, #104	; 0x68
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2400002c 	.word	0x2400002c
 8000af8:	40010000 	.word	0x40010000

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b08:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	200c      	movs	r0, #12
 8000b26:	f000 fb66 	bl	80011f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f000 fb7d 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024400 	.word	0x58024400

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_GPIO_Init+0x50>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <MX_GPIO_Init+0x50>)
 8000b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_GPIO_Init+0x50>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_GPIO_Init+0x50>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <MX_GPIO_Init+0x50>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_GPIO_Init+0x50>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	58024400 	.word	0x58024400

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_MspInit+0x30>)
 8000ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba8:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x30>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x30>)
 8000bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	58024400 	.word	0x58024400

08000bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_TIM_Base_MspInit+0x98>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13d      	bne.n	8000c5e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <HAL_TIM_Base_MspInit+0x9c>)
 8000be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000be8:	4a20      	ldr	r2, [pc, #128]	; (8000c6c <HAL_TIM_Base_MspInit+0x9c>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_TIM_Base_MspInit+0x9c>)
 8000bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream1;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <HAL_TIM_Base_MspInit+0xa4>)
 8000c04:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c08:	220b      	movs	r2, #11
 8000c0a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c0e:	2240      	movs	r2, #64	; 0x40
 8000c10:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c26:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c42:	480b      	ldr	r0, [pc, #44]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c44:	f000 fb0c 	bl	8001260 <HAL_DMA_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000c4e:	f7ff ff9f 	bl	8000b90 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <HAL_TIM_Base_MspInit+0xa0>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	24000078 	.word	0x24000078
 8000c74:	40020028 	.word	0x40020028

08000c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d11f      	bne.n	8000cda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_TIM_MspPostInit+0x70>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <HAL_TIM_MspPostInit+0x70>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_TIM_MspPostInit+0x70>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_TIM_MspPostInit+0x74>)
 8000cd6:	f002 fde1 	bl	800389c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58021000 	.word	0x58021000

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f930 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <DMA1_Stream1_IRQHandler+0x10>)
 8000d4a:	f001 fa95 	bl	8002278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000078 	.word	0x24000078

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <SystemInit+0xe4>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a36      	ldr	r2, [pc, #216]	; (8000e3c <SystemInit+0xe4>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <SystemInit+0xe8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	2b06      	cmp	r3, #6
 8000d76:	d807      	bhi.n	8000d88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <SystemInit+0xe8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 030f 	bic.w	r3, r3, #15
 8000d80:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <SystemInit+0xe8>)
 8000d82:	f043 0307 	orr.w	r3, r3, #7
 8000d86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d88:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <SystemInit+0xec>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a2d      	ldr	r2, [pc, #180]	; (8000e44 <SystemInit+0xec>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <SystemInit+0xec>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <SystemInit+0xec>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4929      	ldr	r1, [pc, #164]	; (8000e44 <SystemInit+0xec>)
 8000da0:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <SystemInit+0xf0>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <SystemInit+0xe8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <SystemInit+0xe8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 030f 	bic.w	r3, r3, #15
 8000dba:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <SystemInit+0xe8>)
 8000dbc:	f043 0307 	orr.w	r3, r3, #7
 8000dc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <SystemInit+0xec>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <SystemInit+0xec>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <SystemInit+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <SystemInit+0xec>)
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <SystemInit+0xf4>)
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <SystemInit+0xec>)
 8000ddc:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <SystemInit+0xf8>)
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <SystemInit+0xec>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <SystemInit+0xfc>)
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <SystemInit+0xec>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <SystemInit+0xec>)
 8000dee:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <SystemInit+0xfc>)
 8000df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <SystemInit+0xec>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <SystemInit+0xec>)
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <SystemInit+0xfc>)
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <SystemInit+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <SystemInit+0xec>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <SystemInit+0xec>)
 8000e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <SystemInit+0xec>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <SystemInit+0x100>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <SystemInit+0x104>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e22:	d202      	bcs.n	8000e2a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <SystemInit+0x108>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <SystemInit+0x10c>)
 8000e2c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	52002000 	.word	0x52002000
 8000e44:	58024400 	.word	0x58024400
 8000e48:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e4c:	02020200 	.word	0x02020200
 8000e50:	01ff0000 	.word	0x01ff0000
 8000e54:	01010280 	.word	0x01010280
 8000e58:	5c001000 	.word	0x5c001000
 8000e5c:	ffff0000 	.word	0xffff0000
 8000e60:	51008108 	.word	0x51008108
 8000e64:	52004000 	.word	0x52004000

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e6c:	f7ff ff74 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	; (8000eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f005 fa7d 	bl	8006394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fce9 	bl	8000870 <main>
  bx  lr
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ea4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ea8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000eac:	08006424 	.word	0x08006424
  ldr r2, =_sbss
 8000eb0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000eb4:	24000300 	.word	0x24000300

08000eb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC3_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f000 f98c 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ec8:	f003 fce2 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_Init+0x68>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	f003 030f 	and.w	r3, r3, #15
 8000ed8:	4913      	ldr	r1, [pc, #76]	; (8000f28 <HAL_Init+0x6c>)
 8000eda:	5ccb      	ldrb	r3, [r1, r3]
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_Init+0x68>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_Init+0x6c>)
 8000ef0:	5cd3      	ldrb	r3, [r2, r3]
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_Init+0x70>)
 8000efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <HAL_Init+0x74>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f06:	200f      	movs	r0, #15
 8000f08:	f000 f814 	bl	8000f34 <HAL_InitTick>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e002      	b.n	8000f1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f16:	f7ff fe41 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	58024400 	.word	0x58024400
 8000f28:	08006404 	.word	0x08006404
 8000f2c:	24000004 	.word	0x24000004
 8000f30:	24000000 	.word	0x24000000

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_InitTick+0x60>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e021      	b.n	8000f8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_InitTick+0x64>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_InitTick+0x60>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f971 	bl	8001246 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f93b 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x68>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2400000c 	.word	0x2400000c
 8000f98:	24000000 	.word	0x24000000
 8000f9c:	24000008 	.word	0x24000008

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2400000c 	.word	0x2400000c
 8000fc4:	240002fc 	.word	0x240002fc

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	240002fc 	.word	0x240002fc

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2400000c 	.word	0x2400000c

08001028 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetREVID+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0c1b      	lsrs	r3, r3, #16
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	5c001000 	.word	0x5c001000

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <__NVIC_SetPriorityGrouping+0x40>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	4313      	orrs	r3, r2
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x40>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	05fa0000 	.word	0x05fa0000

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff40 	bl	8001088 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff90 	bl	8001134 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5f 	bl	80010e0 <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff33 	bl	80010a4 <__NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffa4 	bl	800119c <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff feae 	bl	8000fc8 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e316      	b.n	80018a6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a66      	ldr	r2, [pc, #408]	; (8001418 <HAL_DMA_Init+0x1b8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d04a      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a65      	ldr	r2, [pc, #404]	; (800141c <HAL_DMA_Init+0x1bc>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d045      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a63      	ldr	r2, [pc, #396]	; (8001420 <HAL_DMA_Init+0x1c0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d040      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a62      	ldr	r2, [pc, #392]	; (8001424 <HAL_DMA_Init+0x1c4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d03b      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a60      	ldr	r2, [pc, #384]	; (8001428 <HAL_DMA_Init+0x1c8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d036      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a5f      	ldr	r2, [pc, #380]	; (800142c <HAL_DMA_Init+0x1cc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d031      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a5d      	ldr	r2, [pc, #372]	; (8001430 <HAL_DMA_Init+0x1d0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d02c      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a5c      	ldr	r2, [pc, #368]	; (8001434 <HAL_DMA_Init+0x1d4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d027      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a5a      	ldr	r2, [pc, #360]	; (8001438 <HAL_DMA_Init+0x1d8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d022      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a59      	ldr	r2, [pc, #356]	; (800143c <HAL_DMA_Init+0x1dc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d01d      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a57      	ldr	r2, [pc, #348]	; (8001440 <HAL_DMA_Init+0x1e0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d018      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a56      	ldr	r2, [pc, #344]	; (8001444 <HAL_DMA_Init+0x1e4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a54      	ldr	r2, [pc, #336]	; (8001448 <HAL_DMA_Init+0x1e8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00e      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_DMA_Init+0x1ec>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d009      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_DMA_Init+0x1f0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d004      	beq.n	8001318 <HAL_DMA_Init+0xb8>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_DMA_Init+0x1f4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_DMA_Init+0xbc>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_DMA_Init+0xbe>
 800131c:	2300      	movs	r3, #0
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 813b 	beq.w	800159a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2202      	movs	r2, #2
 8001328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a37      	ldr	r2, [pc, #220]	; (8001418 <HAL_DMA_Init+0x1b8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d04a      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a36      	ldr	r2, [pc, #216]	; (800141c <HAL_DMA_Init+0x1bc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d045      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a34      	ldr	r2, [pc, #208]	; (8001420 <HAL_DMA_Init+0x1c0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d040      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a33      	ldr	r2, [pc, #204]	; (8001424 <HAL_DMA_Init+0x1c4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d03b      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a31      	ldr	r2, [pc, #196]	; (8001428 <HAL_DMA_Init+0x1c8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d036      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_DMA_Init+0x1cc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d031      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <HAL_DMA_Init+0x1d0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d02c      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <HAL_DMA_Init+0x1d4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d027      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <HAL_DMA_Init+0x1d8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d022      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a2a      	ldr	r2, [pc, #168]	; (800143c <HAL_DMA_Init+0x1dc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d01d      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a28      	ldr	r2, [pc, #160]	; (8001440 <HAL_DMA_Init+0x1e0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d018      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_DMA_Init+0x1e4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a25      	ldr	r2, [pc, #148]	; (8001448 <HAL_DMA_Init+0x1e8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00e      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a24      	ldr	r2, [pc, #144]	; (800144c <HAL_DMA_Init+0x1ec>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d009      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a22      	ldr	r2, [pc, #136]	; (8001450 <HAL_DMA_Init+0x1f0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d004      	beq.n	80013d4 <HAL_DMA_Init+0x174>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_DMA_Init+0x1f4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d108      	bne.n	80013e6 <HAL_DMA_Init+0x186>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e007      	b.n	80013f6 <HAL_DMA_Init+0x196>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0201 	bic.w	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013f6:	e02f      	b.n	8001458 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013f8:	f7ff fde6 	bl	8000fc8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b05      	cmp	r3, #5
 8001404:	d928      	bls.n	8001458 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2220      	movs	r2, #32
 800140a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e246      	b.n	80018a6 <HAL_DMA_Init+0x646>
 8001418:	40020010 	.word	0x40020010
 800141c:	40020028 	.word	0x40020028
 8001420:	40020040 	.word	0x40020040
 8001424:	40020058 	.word	0x40020058
 8001428:	40020070 	.word	0x40020070
 800142c:	40020088 	.word	0x40020088
 8001430:	400200a0 	.word	0x400200a0
 8001434:	400200b8 	.word	0x400200b8
 8001438:	40020410 	.word	0x40020410
 800143c:	40020428 	.word	0x40020428
 8001440:	40020440 	.word	0x40020440
 8001444:	40020458 	.word	0x40020458
 8001448:	40020470 	.word	0x40020470
 800144c:	40020488 	.word	0x40020488
 8001450:	400204a0 	.word	0x400204a0
 8001454:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1c8      	bne.n	80013f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4b83      	ldr	r3, [pc, #524]	; (8001680 <HAL_DMA_Init+0x420>)
 8001472:	4013      	ands	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800147e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001496:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d107      	bne.n	80014bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4313      	orrs	r3, r2
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80014bc:	4b71      	ldr	r3, [pc, #452]	; (8001684 <HAL_DMA_Init+0x424>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b71      	ldr	r3, [pc, #452]	; (8001688 <HAL_DMA_Init+0x428>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c8:	d328      	bcc.n	800151c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b28      	cmp	r3, #40	; 0x28
 80014d0:	d903      	bls.n	80014da <HAL_DMA_Init+0x27a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b2e      	cmp	r3, #46	; 0x2e
 80014d8:	d917      	bls.n	800150a <HAL_DMA_Init+0x2aa>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b3e      	cmp	r3, #62	; 0x3e
 80014e0:	d903      	bls.n	80014ea <HAL_DMA_Init+0x28a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b42      	cmp	r3, #66	; 0x42
 80014e8:	d90f      	bls.n	800150a <HAL_DMA_Init+0x2aa>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b46      	cmp	r3, #70	; 0x46
 80014f0:	d903      	bls.n	80014fa <HAL_DMA_Init+0x29a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b48      	cmp	r3, #72	; 0x48
 80014f8:	d907      	bls.n	800150a <HAL_DMA_Init+0x2aa>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b4e      	cmp	r3, #78	; 0x4e
 8001500:	d905      	bls.n	800150e <HAL_DMA_Init+0x2ae>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b52      	cmp	r3, #82	; 0x52
 8001508:	d801      	bhi.n	800150e <HAL_DMA_Init+0x2ae>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_DMA_Init+0x2b0>
 800150e:	2300      	movs	r3, #0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800151a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f023 0307 	bic.w	r3, r3, #7
 8001532:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	4313      	orrs	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	2b04      	cmp	r3, #4
 8001544:	d117      	bne.n	8001576 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4313      	orrs	r3, r2
 800154e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00e      	beq.n	8001576 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f002 f815 	bl	8003588 <DMA_CheckFifoParam>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e197      	b.n	80018a6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f001 ff50 	bl	8003424 <DMA_CalcBaseAndBitshift>
 8001584:	4603      	mov	r3, r0
 8001586:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	223f      	movs	r2, #63	; 0x3f
 8001592:	409a      	lsls	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	e0cd      	b.n	8001736 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a3b      	ldr	r2, [pc, #236]	; (800168c <HAL_DMA_Init+0x42c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d022      	beq.n	80015ea <HAL_DMA_Init+0x38a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a39      	ldr	r2, [pc, #228]	; (8001690 <HAL_DMA_Init+0x430>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01d      	beq.n	80015ea <HAL_DMA_Init+0x38a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a38      	ldr	r2, [pc, #224]	; (8001694 <HAL_DMA_Init+0x434>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d018      	beq.n	80015ea <HAL_DMA_Init+0x38a>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a36      	ldr	r2, [pc, #216]	; (8001698 <HAL_DMA_Init+0x438>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_DMA_Init+0x38a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a35      	ldr	r2, [pc, #212]	; (800169c <HAL_DMA_Init+0x43c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d00e      	beq.n	80015ea <HAL_DMA_Init+0x38a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a33      	ldr	r2, [pc, #204]	; (80016a0 <HAL_DMA_Init+0x440>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d009      	beq.n	80015ea <HAL_DMA_Init+0x38a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a32      	ldr	r2, [pc, #200]	; (80016a4 <HAL_DMA_Init+0x444>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d004      	beq.n	80015ea <HAL_DMA_Init+0x38a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a30      	ldr	r2, [pc, #192]	; (80016a8 <HAL_DMA_Init+0x448>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_DMA_Init+0x38e>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_DMA_Init+0x390>
 80015ee:	2300      	movs	r3, #0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8097 	beq.w	8001724 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a24      	ldr	r2, [pc, #144]	; (800168c <HAL_DMA_Init+0x42c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d021      	beq.n	8001644 <HAL_DMA_Init+0x3e4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_DMA_Init+0x430>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d01c      	beq.n	8001644 <HAL_DMA_Init+0x3e4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_DMA_Init+0x434>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d017      	beq.n	8001644 <HAL_DMA_Init+0x3e4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_DMA_Init+0x438>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d012      	beq.n	8001644 <HAL_DMA_Init+0x3e4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <HAL_DMA_Init+0x43c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d00d      	beq.n	8001644 <HAL_DMA_Init+0x3e4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <HAL_DMA_Init+0x440>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d008      	beq.n	8001644 <HAL_DMA_Init+0x3e4>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_DMA_Init+0x444>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d003      	beq.n	8001644 <HAL_DMA_Init+0x3e4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <HAL_DMA_Init+0x448>)
 8001642:	4293      	cmp	r3, r2
 8001644:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_DMA_Init+0x44c>)
 8001662:	4013      	ands	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b40      	cmp	r3, #64	; 0x40
 800166c:	d020      	beq.n	80016b0 <HAL_DMA_Init+0x450>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b80      	cmp	r3, #128	; 0x80
 8001674:	d102      	bne.n	800167c <HAL_DMA_Init+0x41c>
 8001676:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800167a:	e01a      	b.n	80016b2 <HAL_DMA_Init+0x452>
 800167c:	2300      	movs	r3, #0
 800167e:	e018      	b.n	80016b2 <HAL_DMA_Init+0x452>
 8001680:	fe10803f 	.word	0xfe10803f
 8001684:	5c001000 	.word	0x5c001000
 8001688:	ffff0000 	.word	0xffff0000
 800168c:	58025408 	.word	0x58025408
 8001690:	5802541c 	.word	0x5802541c
 8001694:	58025430 	.word	0x58025430
 8001698:	58025444 	.word	0x58025444
 800169c:	58025458 	.word	0x58025458
 80016a0:	5802546c 	.word	0x5802546c
 80016a4:	58025480 	.word	0x58025480
 80016a8:	58025494 	.word	0x58025494
 80016ac:	fffe000f 	.word	0xfffe000f
 80016b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68d2      	ldr	r2, [r2, #12]
 80016b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <HAL_DMA_Init+0x650>)
 80016f8:	4413      	add	r3, r2
 80016fa:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <HAL_DMA_Init+0x654>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	009a      	lsls	r2, r3, #2
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f001 fe8b 	bl	8003424 <DMA_CalcBaseAndBitshift>
 800170e:	4603      	mov	r3, r0
 8001710:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	2201      	movs	r2, #1
 800171c:	409a      	lsls	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	e008      	b.n	8001736 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2240      	movs	r2, #64	; 0x40
 8001728:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0b7      	b.n	80018a6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5f      	ldr	r2, [pc, #380]	; (80018b8 <HAL_DMA_Init+0x658>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d072      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a5d      	ldr	r2, [pc, #372]	; (80018bc <HAL_DMA_Init+0x65c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d06d      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a5c      	ldr	r2, [pc, #368]	; (80018c0 <HAL_DMA_Init+0x660>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d068      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a5a      	ldr	r2, [pc, #360]	; (80018c4 <HAL_DMA_Init+0x664>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d063      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a59      	ldr	r2, [pc, #356]	; (80018c8 <HAL_DMA_Init+0x668>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d05e      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_DMA_Init+0x66c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d059      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a56      	ldr	r2, [pc, #344]	; (80018d0 <HAL_DMA_Init+0x670>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d054      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a54      	ldr	r2, [pc, #336]	; (80018d4 <HAL_DMA_Init+0x674>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d04f      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a53      	ldr	r2, [pc, #332]	; (80018d8 <HAL_DMA_Init+0x678>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d04a      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a51      	ldr	r2, [pc, #324]	; (80018dc <HAL_DMA_Init+0x67c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d045      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a50      	ldr	r2, [pc, #320]	; (80018e0 <HAL_DMA_Init+0x680>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d040      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <HAL_DMA_Init+0x684>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d03b      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a4d      	ldr	r2, [pc, #308]	; (80018e8 <HAL_DMA_Init+0x688>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d036      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a4b      	ldr	r2, [pc, #300]	; (80018ec <HAL_DMA_Init+0x68c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d031      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a4a      	ldr	r2, [pc, #296]	; (80018f0 <HAL_DMA_Init+0x690>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d02c      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_DMA_Init+0x694>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d027      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a47      	ldr	r2, [pc, #284]	; (80018f8 <HAL_DMA_Init+0x698>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d022      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_DMA_Init+0x69c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01d      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a44      	ldr	r2, [pc, #272]	; (8001900 <HAL_DMA_Init+0x6a0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d018      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a42      	ldr	r2, [pc, #264]	; (8001904 <HAL_DMA_Init+0x6a4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a41      	ldr	r2, [pc, #260]	; (8001908 <HAL_DMA_Init+0x6a8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00e      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3f      	ldr	r2, [pc, #252]	; (800190c <HAL_DMA_Init+0x6ac>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d009      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a3e      	ldr	r2, [pc, #248]	; (8001910 <HAL_DMA_Init+0x6b0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d004      	beq.n	8001826 <HAL_DMA_Init+0x5c6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <HAL_DMA_Init+0x6b4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_DMA_Init+0x5ca>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_DMA_Init+0x5cc>
 800182a:	2300      	movs	r3, #0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d032      	beq.n	8001896 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f001 ff25 	bl	8003680 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b80      	cmp	r3, #128	; 0x80
 800183c:	d102      	bne.n	8001844 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001858:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d010      	beq.n	8001884 <HAL_DMA_Init+0x624>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b08      	cmp	r3, #8
 8001868:	d80c      	bhi.n	8001884 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f001 ffa2 	bl	80037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	e008      	b.n	8001896 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	a7fdabf8 	.word	0xa7fdabf8
 80018b4:	cccccccd 	.word	0xcccccccd
 80018b8:	40020010 	.word	0x40020010
 80018bc:	40020028 	.word	0x40020028
 80018c0:	40020040 	.word	0x40020040
 80018c4:	40020058 	.word	0x40020058
 80018c8:	40020070 	.word	0x40020070
 80018cc:	40020088 	.word	0x40020088
 80018d0:	400200a0 	.word	0x400200a0
 80018d4:	400200b8 	.word	0x400200b8
 80018d8:	40020410 	.word	0x40020410
 80018dc:	40020428 	.word	0x40020428
 80018e0:	40020440 	.word	0x40020440
 80018e4:	40020458 	.word	0x40020458
 80018e8:	40020470 	.word	0x40020470
 80018ec:	40020488 	.word	0x40020488
 80018f0:	400204a0 	.word	0x400204a0
 80018f4:	400204b8 	.word	0x400204b8
 80018f8:	58025408 	.word	0x58025408
 80018fc:	5802541c 	.word	0x5802541c
 8001900:	58025430 	.word	0x58025430
 8001904:	58025444 	.word	0x58025444
 8001908:	58025458 	.word	0x58025458
 800190c:	5802546c 	.word	0x5802546c
 8001910:	58025480 	.word	0x58025480
 8001914:	58025494 	.word	0x58025494

08001918 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e226      	b.n	8001d82 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_DMA_Start_IT+0x2a>
 800193e:	2302      	movs	r3, #2
 8001940:	e21f      	b.n	8001d82 <HAL_DMA_Start_IT+0x46a>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	f040 820a 	bne.w	8001d6c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a68      	ldr	r2, [pc, #416]	; (8001b0c <HAL_DMA_Start_IT+0x1f4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d04a      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a66      	ldr	r2, [pc, #408]	; (8001b10 <HAL_DMA_Start_IT+0x1f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d045      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a65      	ldr	r2, [pc, #404]	; (8001b14 <HAL_DMA_Start_IT+0x1fc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d040      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a63      	ldr	r2, [pc, #396]	; (8001b18 <HAL_DMA_Start_IT+0x200>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d03b      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a62      	ldr	r2, [pc, #392]	; (8001b1c <HAL_DMA_Start_IT+0x204>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d036      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a60      	ldr	r2, [pc, #384]	; (8001b20 <HAL_DMA_Start_IT+0x208>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d031      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a5f      	ldr	r2, [pc, #380]	; (8001b24 <HAL_DMA_Start_IT+0x20c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d02c      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5d      	ldr	r2, [pc, #372]	; (8001b28 <HAL_DMA_Start_IT+0x210>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d027      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5c      	ldr	r2, [pc, #368]	; (8001b2c <HAL_DMA_Start_IT+0x214>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a5a      	ldr	r2, [pc, #360]	; (8001b30 <HAL_DMA_Start_IT+0x218>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01d      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a59      	ldr	r2, [pc, #356]	; (8001b34 <HAL_DMA_Start_IT+0x21c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d018      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a57      	ldr	r2, [pc, #348]	; (8001b38 <HAL_DMA_Start_IT+0x220>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a56      	ldr	r2, [pc, #344]	; (8001b3c <HAL_DMA_Start_IT+0x224>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00e      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a54      	ldr	r2, [pc, #336]	; (8001b40 <HAL_DMA_Start_IT+0x228>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a53      	ldr	r2, [pc, #332]	; (8001b44 <HAL_DMA_Start_IT+0x22c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_DMA_Start_IT+0x230>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d108      	bne.n	8001a18 <HAL_DMA_Start_IT+0x100>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_DMA_Start_IT+0x110>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f001 fb4c 	bl	80030cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_DMA_Start_IT+0x1f4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d04a      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a33      	ldr	r2, [pc, #204]	; (8001b10 <HAL_DMA_Start_IT+0x1f8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d045      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <HAL_DMA_Start_IT+0x1fc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d040      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <HAL_DMA_Start_IT+0x200>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d03b      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <HAL_DMA_Start_IT+0x204>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d036      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <HAL_DMA_Start_IT+0x208>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d031      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <HAL_DMA_Start_IT+0x20c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02c      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <HAL_DMA_Start_IT+0x210>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d027      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_DMA_Start_IT+0x214>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d022      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <HAL_DMA_Start_IT+0x218>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d01d      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <HAL_DMA_Start_IT+0x21c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d018      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_DMA_Start_IT+0x220>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d013      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_DMA_Start_IT+0x224>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <HAL_DMA_Start_IT+0x228>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d009      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_DMA_Start_IT+0x22c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d004      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_DMA_Start_IT+0x230>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Start_IT+0x1c0>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_DMA_Start_IT+0x1c2>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d036      	beq.n	8001b4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 021e 	bic.w	r2, r3, #30
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0216 	orr.w	r2, r2, #22
 8001af0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03e      	beq.n	8001b78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0208 	orr.w	r2, r2, #8
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e035      	b.n	8001b78 <HAL_DMA_Start_IT+0x260>
 8001b0c:	40020010 	.word	0x40020010
 8001b10:	40020028 	.word	0x40020028
 8001b14:	40020040 	.word	0x40020040
 8001b18:	40020058 	.word	0x40020058
 8001b1c:	40020070 	.word	0x40020070
 8001b20:	40020088 	.word	0x40020088
 8001b24:	400200a0 	.word	0x400200a0
 8001b28:	400200b8 	.word	0x400200b8
 8001b2c:	40020410 	.word	0x40020410
 8001b30:	40020428 	.word	0x40020428
 8001b34:	40020440 	.word	0x40020440
 8001b38:	40020458 	.word	0x40020458
 8001b3c:	40020470 	.word	0x40020470
 8001b40:	40020488 	.word	0x40020488
 8001b44:	400204a0 	.word	0x400204a0
 8001b48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 020e 	bic.w	r2, r3, #14
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 020a 	orr.w	r2, r2, #10
 8001b5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0204 	orr.w	r2, r2, #4
 8001b76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a83      	ldr	r2, [pc, #524]	; (8001d8c <HAL_DMA_Start_IT+0x474>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d072      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a82      	ldr	r2, [pc, #520]	; (8001d90 <HAL_DMA_Start_IT+0x478>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d06d      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a80      	ldr	r2, [pc, #512]	; (8001d94 <HAL_DMA_Start_IT+0x47c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d068      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7f      	ldr	r2, [pc, #508]	; (8001d98 <HAL_DMA_Start_IT+0x480>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d063      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a7d      	ldr	r2, [pc, #500]	; (8001d9c <HAL_DMA_Start_IT+0x484>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d05e      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7c      	ldr	r2, [pc, #496]	; (8001da0 <HAL_DMA_Start_IT+0x488>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d059      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a7a      	ldr	r2, [pc, #488]	; (8001da4 <HAL_DMA_Start_IT+0x48c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d054      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a79      	ldr	r2, [pc, #484]	; (8001da8 <HAL_DMA_Start_IT+0x490>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d04f      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_DMA_Start_IT+0x494>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04a      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a76      	ldr	r2, [pc, #472]	; (8001db0 <HAL_DMA_Start_IT+0x498>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d045      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a74      	ldr	r2, [pc, #464]	; (8001db4 <HAL_DMA_Start_IT+0x49c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d040      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a73      	ldr	r2, [pc, #460]	; (8001db8 <HAL_DMA_Start_IT+0x4a0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d03b      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a71      	ldr	r2, [pc, #452]	; (8001dbc <HAL_DMA_Start_IT+0x4a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d036      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a70      	ldr	r2, [pc, #448]	; (8001dc0 <HAL_DMA_Start_IT+0x4a8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d031      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6e      	ldr	r2, [pc, #440]	; (8001dc4 <HAL_DMA_Start_IT+0x4ac>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02c      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6d      	ldr	r2, [pc, #436]	; (8001dc8 <HAL_DMA_Start_IT+0x4b0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d027      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6b      	ldr	r2, [pc, #428]	; (8001dcc <HAL_DMA_Start_IT+0x4b4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_DMA_Start_IT+0x4b8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01d      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a68      	ldr	r2, [pc, #416]	; (8001dd4 <HAL_DMA_Start_IT+0x4bc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a67      	ldr	r2, [pc, #412]	; (8001dd8 <HAL_DMA_Start_IT+0x4c0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <HAL_DMA_Start_IT+0x4c4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a64      	ldr	r2, [pc, #400]	; (8001de0 <HAL_DMA_Start_IT+0x4c8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a62      	ldr	r2, [pc, #392]	; (8001de4 <HAL_DMA_Start_IT+0x4cc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <HAL_DMA_Start_IT+0x4d0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Start_IT+0x354>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_Start_IT+0x356>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01a      	beq.n	8001ca8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c8e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_DMA_Start_IT+0x474>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d04a      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a36      	ldr	r2, [pc, #216]	; (8001d90 <HAL_DMA_Start_IT+0x478>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d045      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_DMA_Start_IT+0x47c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d040      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <HAL_DMA_Start_IT+0x480>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d03b      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_DMA_Start_IT+0x484>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d036      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a30      	ldr	r2, [pc, #192]	; (8001da0 <HAL_DMA_Start_IT+0x488>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d031      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2e      	ldr	r2, [pc, #184]	; (8001da4 <HAL_DMA_Start_IT+0x48c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d02c      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	; (8001da8 <HAL_DMA_Start_IT+0x490>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d027      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <HAL_DMA_Start_IT+0x494>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d022      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a2a      	ldr	r2, [pc, #168]	; (8001db0 <HAL_DMA_Start_IT+0x498>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d01d      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_DMA_Start_IT+0x49c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d018      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_DMA_Start_IT+0x4a0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <HAL_DMA_Start_IT+0x4a4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00e      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <HAL_DMA_Start_IT+0x4a8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_DMA_Start_IT+0x4ac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_DMA_Start_IT+0x4b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d108      	bne.n	8001d5a <HAL_DMA_Start_IT+0x442>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e012      	b.n	8001d80 <HAL_DMA_Start_IT+0x468>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e009      	b.n	8001d80 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40020010 	.word	0x40020010
 8001d90:	40020028 	.word	0x40020028
 8001d94:	40020040 	.word	0x40020040
 8001d98:	40020058 	.word	0x40020058
 8001d9c:	40020070 	.word	0x40020070
 8001da0:	40020088 	.word	0x40020088
 8001da4:	400200a0 	.word	0x400200a0
 8001da8:	400200b8 	.word	0x400200b8
 8001dac:	40020410 	.word	0x40020410
 8001db0:	40020428 	.word	0x40020428
 8001db4:	40020440 	.word	0x40020440
 8001db8:	40020458 	.word	0x40020458
 8001dbc:	40020470 	.word	0x40020470
 8001dc0:	40020488 	.word	0x40020488
 8001dc4:	400204a0 	.word	0x400204a0
 8001dc8:	400204b8 	.word	0x400204b8
 8001dcc:	58025408 	.word	0x58025408
 8001dd0:	5802541c 	.word	0x5802541c
 8001dd4:	58025430 	.word	0x58025430
 8001dd8:	58025444 	.word	0x58025444
 8001ddc:	58025458 	.word	0x58025458
 8001de0:	5802546c 	.word	0x5802546c
 8001de4:	58025480 	.word	0x58025480
 8001de8:	58025494 	.word	0x58025494

08001dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e237      	b.n	800226e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d004      	beq.n	8001e14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e22c      	b.n	800226e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <HAL_DMA_Abort_IT+0x1a0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d04a      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5b      	ldr	r2, [pc, #364]	; (8001f90 <HAL_DMA_Abort_IT+0x1a4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d045      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <HAL_DMA_Abort_IT+0x1a8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d040      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_DMA_Abort_IT+0x1ac>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d03b      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_DMA_Abort_IT+0x1b0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d036      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a55      	ldr	r2, [pc, #340]	; (8001fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d031      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02c      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d027      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a50      	ldr	r2, [pc, #320]	; (8001fac <HAL_DMA_Abort_IT+0x1c0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d022      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a4f      	ldr	r2, [pc, #316]	; (8001fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01d      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d018      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a4c      	ldr	r2, [pc, #304]	; (8001fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	; (8001fbc <HAL_DMA_Abort_IT+0x1d0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00e      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a49      	ldr	r2, [pc, #292]	; (8001fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_DMA_Abort_IT+0xcc>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_DMA_Abort_IT+0xce>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8086 	beq.w	8001fcc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_DMA_Abort_IT+0x1a0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d04a      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <HAL_DMA_Abort_IT+0x1a4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d045      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2c      	ldr	r2, [pc, #176]	; (8001f94 <HAL_DMA_Abort_IT+0x1a8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d040      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <HAL_DMA_Abort_IT+0x1ac>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d03b      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_DMA_Abort_IT+0x1b0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d036      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d031      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d02c      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d027      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a23      	ldr	r2, [pc, #140]	; (8001fac <HAL_DMA_Abort_IT+0x1c0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01d      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d018      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_DMA_Abort_IT+0x1d0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d108      	bne.n	8001f7a <HAL_DMA_Abort_IT+0x18e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e178      	b.n	800226c <HAL_DMA_Abort_IT+0x480>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e16f      	b.n	800226c <HAL_DMA_Abort_IT+0x480>
 8001f8c:	40020010 	.word	0x40020010
 8001f90:	40020028 	.word	0x40020028
 8001f94:	40020040 	.word	0x40020040
 8001f98:	40020058 	.word	0x40020058
 8001f9c:	40020070 	.word	0x40020070
 8001fa0:	40020088 	.word	0x40020088
 8001fa4:	400200a0 	.word	0x400200a0
 8001fa8:	400200b8 	.word	0x400200b8
 8001fac:	40020410 	.word	0x40020410
 8001fb0:	40020428 	.word	0x40020428
 8001fb4:	40020440 	.word	0x40020440
 8001fb8:	40020458 	.word	0x40020458
 8001fbc:	40020470 	.word	0x40020470
 8001fc0:	40020488 	.word	0x40020488
 8001fc4:	400204a0 	.word	0x400204a0
 8001fc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 020e 	bic.w	r2, r2, #14
 8001fda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6c      	ldr	r2, [pc, #432]	; (8002194 <HAL_DMA_Abort_IT+0x3a8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6b      	ldr	r2, [pc, #428]	; (8002198 <HAL_DMA_Abort_IT+0x3ac>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d045      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a69      	ldr	r2, [pc, #420]	; (800219c <HAL_DMA_Abort_IT+0x3b0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d040      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a68      	ldr	r2, [pc, #416]	; (80021a0 <HAL_DMA_Abort_IT+0x3b4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d03b      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_DMA_Abort_IT+0x3b8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d036      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_DMA_Abort_IT+0x3bc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d031      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a63      	ldr	r2, [pc, #396]	; (80021ac <HAL_DMA_Abort_IT+0x3c0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02c      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a62      	ldr	r2, [pc, #392]	; (80021b0 <HAL_DMA_Abort_IT+0x3c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d027      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a60      	ldr	r2, [pc, #384]	; (80021b4 <HAL_DMA_Abort_IT+0x3c8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5f      	ldr	r2, [pc, #380]	; (80021b8 <HAL_DMA_Abort_IT+0x3cc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01d      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <HAL_DMA_Abort_IT+0x3d0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d018      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_DMA_Abort_IT+0x3d4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5a      	ldr	r2, [pc, #360]	; (80021c4 <HAL_DMA_Abort_IT+0x3d8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00e      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a59      	ldr	r2, [pc, #356]	; (80021c8 <HAL_DMA_Abort_IT+0x3dc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_DMA_Abort_IT+0x3e0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_DMA_Abort_IT+0x3e4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <HAL_DMA_Abort_IT+0x2a2>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e007      	b.n	800209e <HAL_DMA_Abort_IT+0x2b2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <HAL_DMA_Abort_IT+0x3a8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d072      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a3a      	ldr	r2, [pc, #232]	; (8002198 <HAL_DMA_Abort_IT+0x3ac>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d06d      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a39      	ldr	r2, [pc, #228]	; (800219c <HAL_DMA_Abort_IT+0x3b0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d068      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a37      	ldr	r2, [pc, #220]	; (80021a0 <HAL_DMA_Abort_IT+0x3b4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d063      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a36      	ldr	r2, [pc, #216]	; (80021a4 <HAL_DMA_Abort_IT+0x3b8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d05e      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a34      	ldr	r2, [pc, #208]	; (80021a8 <HAL_DMA_Abort_IT+0x3bc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d059      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a33      	ldr	r2, [pc, #204]	; (80021ac <HAL_DMA_Abort_IT+0x3c0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d054      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a31      	ldr	r2, [pc, #196]	; (80021b0 <HAL_DMA_Abort_IT+0x3c4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d04f      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_DMA_Abort_IT+0x3c8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04a      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <HAL_DMA_Abort_IT+0x3cc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d045      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_DMA_Abort_IT+0x3d0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d040      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_DMA_Abort_IT+0x3d4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d03b      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <HAL_DMA_Abort_IT+0x3d8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d036      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_DMA_Abort_IT+0x3dc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d031      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a27      	ldr	r2, [pc, #156]	; (80021cc <HAL_DMA_Abort_IT+0x3e0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d02c      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <HAL_DMA_Abort_IT+0x3e4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d027      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_DMA_Abort_IT+0x3e8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_DMA_Abort_IT+0x3ec>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_DMA_Abort_IT+0x3f0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d018      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_DMA_Abort_IT+0x3f4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <HAL_DMA_Abort_IT+0x3f8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00e      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_DMA_Abort_IT+0x3fc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <HAL_DMA_Abort_IT+0x400>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_DMA_Abort_IT+0x404>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d132      	bne.n	80021f4 <HAL_DMA_Abort_IT+0x408>
 800218e:	2301      	movs	r3, #1
 8002190:	e031      	b.n	80021f6 <HAL_DMA_Abort_IT+0x40a>
 8002192:	bf00      	nop
 8002194:	40020010 	.word	0x40020010
 8002198:	40020028 	.word	0x40020028
 800219c:	40020040 	.word	0x40020040
 80021a0:	40020058 	.word	0x40020058
 80021a4:	40020070 	.word	0x40020070
 80021a8:	40020088 	.word	0x40020088
 80021ac:	400200a0 	.word	0x400200a0
 80021b0:	400200b8 	.word	0x400200b8
 80021b4:	40020410 	.word	0x40020410
 80021b8:	40020428 	.word	0x40020428
 80021bc:	40020440 	.word	0x40020440
 80021c0:	40020458 	.word	0x40020458
 80021c4:	40020470 	.word	0x40020470
 80021c8:	40020488 	.word	0x40020488
 80021cc:	400204a0 	.word	0x400204a0
 80021d0:	400204b8 	.word	0x400204b8
 80021d4:	58025408 	.word	0x58025408
 80021d8:	5802541c 	.word	0x5802541c
 80021dc:	58025430 	.word	0x58025430
 80021e0:	58025444 	.word	0x58025444
 80021e4:	58025458 	.word	0x58025458
 80021e8:	5802546c 	.word	0x5802546c
 80021ec:	58025480 	.word	0x58025480
 80021f0:	58025494 	.word	0x58025494
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d028      	beq.n	800224c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002208:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2201      	movs	r2, #1
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002228:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002240:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800224a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop

08002278 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002284:	4b67      	ldr	r3, [pc, #412]	; (8002424 <HAL_DMA_IRQHandler+0x1ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_DMA_IRQHandler+0x1b0>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0a9b      	lsrs	r3, r3, #10
 8002290:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a5f      	ldr	r2, [pc, #380]	; (800242c <HAL_DMA_IRQHandler+0x1b4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d04a      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <HAL_DMA_IRQHandler+0x1b8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d045      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5c      	ldr	r2, [pc, #368]	; (8002434 <HAL_DMA_IRQHandler+0x1bc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d040      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a5a      	ldr	r2, [pc, #360]	; (8002438 <HAL_DMA_IRQHandler+0x1c0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d03b      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a59      	ldr	r2, [pc, #356]	; (800243c <HAL_DMA_IRQHandler+0x1c4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d036      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a57      	ldr	r2, [pc, #348]	; (8002440 <HAL_DMA_IRQHandler+0x1c8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d031      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a56      	ldr	r2, [pc, #344]	; (8002444 <HAL_DMA_IRQHandler+0x1cc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d02c      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a54      	ldr	r2, [pc, #336]	; (8002448 <HAL_DMA_IRQHandler+0x1d0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d027      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a53      	ldr	r2, [pc, #332]	; (800244c <HAL_DMA_IRQHandler+0x1d4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d022      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a51      	ldr	r2, [pc, #324]	; (8002450 <HAL_DMA_IRQHandler+0x1d8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01d      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a50      	ldr	r2, [pc, #320]	; (8002454 <HAL_DMA_IRQHandler+0x1dc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d018      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a4e      	ldr	r2, [pc, #312]	; (8002458 <HAL_DMA_IRQHandler+0x1e0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_DMA_IRQHandler+0x1e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00e      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_DMA_IRQHandler+0x1e8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a4a      	ldr	r2, [pc, #296]	; (8002464 <HAL_DMA_IRQHandler+0x1ec>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a48      	ldr	r2, [pc, #288]	; (8002468 <HAL_DMA_IRQHandler+0x1f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_DMA_IRQHandler+0xd6>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_DMA_IRQHandler+0xd8>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 842b 	beq.w	8002bac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2208      	movs	r2, #8
 8002360:	409a      	lsls	r2, r3
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80a2 	beq.w	80024b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a2e      	ldr	r2, [pc, #184]	; (800242c <HAL_DMA_IRQHandler+0x1b4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d04a      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <HAL_DMA_IRQHandler+0x1b8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d045      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <HAL_DMA_IRQHandler+0x1bc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d040      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <HAL_DMA_IRQHandler+0x1c0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d03b      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_DMA_IRQHandler+0x1c4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d036      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_DMA_IRQHandler+0x1c8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d031      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a25      	ldr	r2, [pc, #148]	; (8002444 <HAL_DMA_IRQHandler+0x1cc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02c      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_DMA_IRQHandler+0x1d0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d027      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_DMA_IRQHandler+0x1d4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d022      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_DMA_IRQHandler+0x1d8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01d      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_DMA_IRQHandler+0x1dc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d018      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_DMA_IRQHandler+0x1e0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_DMA_IRQHandler+0x1e4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00e      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_DMA_IRQHandler+0x1e8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_DMA_IRQHandler+0x1ec>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_DMA_IRQHandler+0x1f0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d12f      	bne.n	800246c <HAL_DMA_IRQHandler+0x1f4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	e02e      	b.n	8002480 <HAL_DMA_IRQHandler+0x208>
 8002422:	bf00      	nop
 8002424:	24000000 	.word	0x24000000
 8002428:	1b4e81b5 	.word	0x1b4e81b5
 800242c:	40020010 	.word	0x40020010
 8002430:	40020028 	.word	0x40020028
 8002434:	40020040 	.word	0x40020040
 8002438:	40020058 	.word	0x40020058
 800243c:	40020070 	.word	0x40020070
 8002440:	40020088 	.word	0x40020088
 8002444:	400200a0 	.word	0x400200a0
 8002448:	400200b8 	.word	0x400200b8
 800244c:	40020410 	.word	0x40020410
 8002450:	40020428 	.word	0x40020428
 8002454:	40020440 	.word	0x40020440
 8002458:	40020458 	.word	0x40020458
 800245c:	40020470 	.word	0x40020470
 8002460:	40020488 	.word	0x40020488
 8002464:	400204a0 	.word	0x400204a0
 8002468:	400204b8 	.word	0x400204b8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2208      	movs	r2, #8
 800249e:	409a      	lsls	r2, r3
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d06e      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a69      	ldr	r2, [pc, #420]	; (8002670 <HAL_DMA_IRQHandler+0x3f8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d04a      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a67      	ldr	r2, [pc, #412]	; (8002674 <HAL_DMA_IRQHandler+0x3fc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d045      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a66      	ldr	r2, [pc, #408]	; (8002678 <HAL_DMA_IRQHandler+0x400>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d040      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a64      	ldr	r2, [pc, #400]	; (800267c <HAL_DMA_IRQHandler+0x404>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d03b      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a63      	ldr	r2, [pc, #396]	; (8002680 <HAL_DMA_IRQHandler+0x408>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d036      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a61      	ldr	r2, [pc, #388]	; (8002684 <HAL_DMA_IRQHandler+0x40c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d031      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a60      	ldr	r2, [pc, #384]	; (8002688 <HAL_DMA_IRQHandler+0x410>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d02c      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5e      	ldr	r2, [pc, #376]	; (800268c <HAL_DMA_IRQHandler+0x414>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d027      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5d      	ldr	r2, [pc, #372]	; (8002690 <HAL_DMA_IRQHandler+0x418>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5b      	ldr	r2, [pc, #364]	; (8002694 <HAL_DMA_IRQHandler+0x41c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01d      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <HAL_DMA_IRQHandler+0x420>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_DMA_IRQHandler+0x424>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a57      	ldr	r2, [pc, #348]	; (80026a0 <HAL_DMA_IRQHandler+0x428>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_DMA_IRQHandler+0x42c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <HAL_DMA_IRQHandler+0x430>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_DMA_IRQHandler+0x434>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10a      	bne.n	800257c <HAL_DMA_IRQHandler+0x304>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e003      	b.n	8002584 <HAL_DMA_IRQHandler+0x30c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2201      	movs	r2, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f043 0202 	orr.w	r2, r3, #2
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2204      	movs	r2, #4
 80025ae:	409a      	lsls	r2, r3
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 808f 	beq.w	80026d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <HAL_DMA_IRQHandler+0x3f8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d04a      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2a      	ldr	r2, [pc, #168]	; (8002674 <HAL_DMA_IRQHandler+0x3fc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d045      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_DMA_IRQHandler+0x400>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d040      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <HAL_DMA_IRQHandler+0x404>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d03b      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_DMA_IRQHandler+0x408>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d036      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <HAL_DMA_IRQHandler+0x40c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d031      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <HAL_DMA_IRQHandler+0x410>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d02c      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a21      	ldr	r2, [pc, #132]	; (800268c <HAL_DMA_IRQHandler+0x414>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d027      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_DMA_IRQHandler+0x418>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_DMA_IRQHandler+0x41c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01d      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_DMA_IRQHandler+0x420>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d018      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1b      	ldr	r2, [pc, #108]	; (800269c <HAL_DMA_IRQHandler+0x424>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <HAL_DMA_IRQHandler+0x428>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <HAL_DMA_IRQHandler+0x42c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <HAL_DMA_IRQHandler+0x430>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <HAL_DMA_IRQHandler+0x434>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d12a      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x438>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e023      	b.n	80026b8 <HAL_DMA_IRQHandler+0x440>
 8002670:	40020010 	.word	0x40020010
 8002674:	40020028 	.word	0x40020028
 8002678:	40020040 	.word	0x40020040
 800267c:	40020058 	.word	0x40020058
 8002680:	40020070 	.word	0x40020070
 8002684:	40020088 	.word	0x40020088
 8002688:	400200a0 	.word	0x400200a0
 800268c:	400200b8 	.word	0x400200b8
 8002690:	40020410 	.word	0x40020410
 8002694:	40020428 	.word	0x40020428
 8002698:	40020440 	.word	0x40020440
 800269c:	40020458 	.word	0x40020458
 80026a0:	40020470 	.word	0x40020470
 80026a4:	40020488 	.word	0x40020488
 80026a8:	400204a0 	.word	0x400204a0
 80026ac:	400204b8 	.word	0x400204b8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2204      	movs	r2, #4
 80026c6:	409a      	lsls	r2, r3
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f043 0204 	orr.w	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2210      	movs	r2, #16
 80026e2:	409a      	lsls	r2, r3
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a6 	beq.w	800283a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a85      	ldr	r2, [pc, #532]	; (8002908 <HAL_DMA_IRQHandler+0x690>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04a      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a83      	ldr	r2, [pc, #524]	; (800290c <HAL_DMA_IRQHandler+0x694>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d045      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a82      	ldr	r2, [pc, #520]	; (8002910 <HAL_DMA_IRQHandler+0x698>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d040      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a80      	ldr	r2, [pc, #512]	; (8002914 <HAL_DMA_IRQHandler+0x69c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d03b      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7f      	ldr	r2, [pc, #508]	; (8002918 <HAL_DMA_IRQHandler+0x6a0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d036      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a7d      	ldr	r2, [pc, #500]	; (800291c <HAL_DMA_IRQHandler+0x6a4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7c      	ldr	r2, [pc, #496]	; (8002920 <HAL_DMA_IRQHandler+0x6a8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d02c      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a7a      	ldr	r2, [pc, #488]	; (8002924 <HAL_DMA_IRQHandler+0x6ac>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d027      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a79      	ldr	r2, [pc, #484]	; (8002928 <HAL_DMA_IRQHandler+0x6b0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a77      	ldr	r2, [pc, #476]	; (800292c <HAL_DMA_IRQHandler+0x6b4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01d      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a76      	ldr	r2, [pc, #472]	; (8002930 <HAL_DMA_IRQHandler+0x6b8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a74      	ldr	r2, [pc, #464]	; (8002934 <HAL_DMA_IRQHandler+0x6bc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a73      	ldr	r2, [pc, #460]	; (8002938 <HAL_DMA_IRQHandler+0x6c0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a71      	ldr	r2, [pc, #452]	; (800293c <HAL_DMA_IRQHandler+0x6c4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a70      	ldr	r2, [pc, #448]	; (8002940 <HAL_DMA_IRQHandler+0x6c8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6e      	ldr	r2, [pc, #440]	; (8002944 <HAL_DMA_IRQHandler+0x6cc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10a      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x52c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e009      	b.n	80027b8 <HAL_DMA_IRQHandler+0x540>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d03e      	beq.n	800283a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	2210      	movs	r2, #16
 80027c6:	409a      	lsls	r2, r3
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d108      	bne.n	80027fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d024      	beq.n	800283a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
 80027f8:	e01f      	b.n	800283a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01b      	beq.n	800283a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
 800280a:	e016      	b.n	800283a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0208 	bic.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2220      	movs	r2, #32
 8002844:	409a      	lsls	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8110 	beq.w	8002a70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <HAL_DMA_IRQHandler+0x690>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d04a      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2b      	ldr	r2, [pc, #172]	; (800290c <HAL_DMA_IRQHandler+0x694>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d045      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_DMA_IRQHandler+0x698>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d040      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_DMA_IRQHandler+0x69c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d03b      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <HAL_DMA_IRQHandler+0x6a0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d036      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <HAL_DMA_IRQHandler+0x6a4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d031      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <HAL_DMA_IRQHandler+0x6a8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d02c      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <HAL_DMA_IRQHandler+0x6ac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d027      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_DMA_IRQHandler+0x6b0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d022      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <HAL_DMA_IRQHandler+0x6b4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d01d      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_DMA_IRQHandler+0x6b8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d018      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_DMA_IRQHandler+0x6bc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <HAL_DMA_IRQHandler+0x6c0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00e      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_DMA_IRQHandler+0x6c4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_DMA_IRQHandler+0x6c8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d004      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_DMA_IRQHandler+0x6cc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d12b      	bne.n	8002948 <HAL_DMA_IRQHandler+0x6d0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e02a      	b.n	800295c <HAL_DMA_IRQHandler+0x6e4>
 8002906:	bf00      	nop
 8002908:	40020010 	.word	0x40020010
 800290c:	40020028 	.word	0x40020028
 8002910:	40020040 	.word	0x40020040
 8002914:	40020058 	.word	0x40020058
 8002918:	40020070 	.word	0x40020070
 800291c:	40020088 	.word	0x40020088
 8002920:	400200a0 	.word	0x400200a0
 8002924:	400200b8 	.word	0x400200b8
 8002928:	40020410 	.word	0x40020410
 800292c:	40020428 	.word	0x40020428
 8002930:	40020440 	.word	0x40020440
 8002934:	40020458 	.word	0x40020458
 8002938:	40020470 	.word	0x40020470
 800293c:	40020488 	.word	0x40020488
 8002940:	400204a0 	.word	0x400204a0
 8002944:	400204b8 	.word	0x400204b8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8087 	beq.w	8002a70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2220      	movs	r2, #32
 800296c:	409a      	lsls	r2, r3
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b04      	cmp	r3, #4
 800297c:	d139      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0216 	bic.w	r2, r2, #22
 800298c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800299c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_DMA_IRQHandler+0x736>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0208 	bic.w	r2, r2, #8
 80029bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	223f      	movs	r2, #63	; 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 834a 	beq.w	800307c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
          }
          return;
 80029f0:	e344      	b.n	800307c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d018      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d02c      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
 8002a1e:	e027      	b.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d023      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
 8002a30:	e01e      	b.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10f      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0210 	bic.w	r2, r2, #16
 8002a4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8306 	beq.w	8003086 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8088 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a7a      	ldr	r2, [pc, #488]	; (8002c80 <HAL_DMA_IRQHandler+0xa08>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d04a      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a79      	ldr	r2, [pc, #484]	; (8002c84 <HAL_DMA_IRQHandler+0xa0c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d045      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a77      	ldr	r2, [pc, #476]	; (8002c88 <HAL_DMA_IRQHandler+0xa10>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a76      	ldr	r2, [pc, #472]	; (8002c8c <HAL_DMA_IRQHandler+0xa14>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d03b      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a74      	ldr	r2, [pc, #464]	; (8002c90 <HAL_DMA_IRQHandler+0xa18>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d036      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a73      	ldr	r2, [pc, #460]	; (8002c94 <HAL_DMA_IRQHandler+0xa1c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d031      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <HAL_DMA_IRQHandler+0xa20>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02c      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a70      	ldr	r2, [pc, #448]	; (8002c9c <HAL_DMA_IRQHandler+0xa24>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d027      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6e      	ldr	r2, [pc, #440]	; (8002ca0 <HAL_DMA_IRQHandler+0xa28>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d022      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6d      	ldr	r2, [pc, #436]	; (8002ca4 <HAL_DMA_IRQHandler+0xa2c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01d      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6b      	ldr	r2, [pc, #428]	; (8002ca8 <HAL_DMA_IRQHandler+0xa30>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d018      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6a      	ldr	r2, [pc, #424]	; (8002cac <HAL_DMA_IRQHandler+0xa34>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a68      	ldr	r2, [pc, #416]	; (8002cb0 <HAL_DMA_IRQHandler+0xa38>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00e      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a67      	ldr	r2, [pc, #412]	; (8002cb4 <HAL_DMA_IRQHandler+0xa3c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a65      	ldr	r2, [pc, #404]	; (8002cb8 <HAL_DMA_IRQHandler+0xa40>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a64      	ldr	r2, [pc, #400]	; (8002cbc <HAL_DMA_IRQHandler+0xa44>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d108      	bne.n	8002b42 <HAL_DMA_IRQHandler+0x8ca>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e007      	b.n	8002b52 <HAL_DMA_IRQHandler+0x8da>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d307      	bcc.n	8002b6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f2      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x8da>
 8002b6c:	e000      	b.n	8002b70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002b6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002b86:	e003      	b.n	8002b90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8272 	beq.w	8003086 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
 8002baa:	e26c      	b.n	8003086 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <HAL_DMA_IRQHandler+0xa48>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x984>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a42      	ldr	r2, [pc, #264]	; (8002cc4 <HAL_DMA_IRQHandler+0xa4c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01d      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x984>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a40      	ldr	r2, [pc, #256]	; (8002cc8 <HAL_DMA_IRQHandler+0xa50>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x984>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a3f      	ldr	r2, [pc, #252]	; (8002ccc <HAL_DMA_IRQHandler+0xa54>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x984>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3d      	ldr	r2, [pc, #244]	; (8002cd0 <HAL_DMA_IRQHandler+0xa58>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x984>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a3c      	ldr	r2, [pc, #240]	; (8002cd4 <HAL_DMA_IRQHandler+0xa5c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x984>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a3a      	ldr	r2, [pc, #232]	; (8002cd8 <HAL_DMA_IRQHandler+0xa60>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x984>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a39      	ldr	r2, [pc, #228]	; (8002cdc <HAL_DMA_IRQHandler+0xa64>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d101      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x988>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_DMA_IRQHandler+0x98a>
 8002c00:	2300      	movs	r3, #0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 823f 	beq.w	8003086 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2204      	movs	r2, #4
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80cd 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0xb48>
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80c7 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d049      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8210 	beq.w	8003080 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c68:	e20a      	b.n	8003080 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8206 	beq.w	8003080 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c7c:	e200      	b.n	8003080 <HAL_DMA_IRQHandler+0xe08>
 8002c7e:	bf00      	nop
 8002c80:	40020010 	.word	0x40020010
 8002c84:	40020028 	.word	0x40020028
 8002c88:	40020040 	.word	0x40020040
 8002c8c:	40020058 	.word	0x40020058
 8002c90:	40020070 	.word	0x40020070
 8002c94:	40020088 	.word	0x40020088
 8002c98:	400200a0 	.word	0x400200a0
 8002c9c:	400200b8 	.word	0x400200b8
 8002ca0:	40020410 	.word	0x40020410
 8002ca4:	40020428 	.word	0x40020428
 8002ca8:	40020440 	.word	0x40020440
 8002cac:	40020458 	.word	0x40020458
 8002cb0:	40020470 	.word	0x40020470
 8002cb4:	40020488 	.word	0x40020488
 8002cb8:	400204a0 	.word	0x400204a0
 8002cbc:	400204b8 	.word	0x400204b8
 8002cc0:	58025408 	.word	0x58025408
 8002cc4:	5802541c 	.word	0x5802541c
 8002cc8:	58025430 	.word	0x58025430
 8002ccc:	58025444 	.word	0x58025444
 8002cd0:	58025458 	.word	0x58025458
 8002cd4:	5802546c 	.word	0x5802546c
 8002cd8:	58025480 	.word	0x58025480
 8002cdc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d160      	bne.n	8002dac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7f      	ldr	r2, [pc, #508]	; (8002eec <HAL_DMA_IRQHandler+0xc74>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d04a      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7d      	ldr	r2, [pc, #500]	; (8002ef0 <HAL_DMA_IRQHandler+0xc78>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d045      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7c      	ldr	r2, [pc, #496]	; (8002ef4 <HAL_DMA_IRQHandler+0xc7c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d040      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7a      	ldr	r2, [pc, #488]	; (8002ef8 <HAL_DMA_IRQHandler+0xc80>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d03b      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a79      	ldr	r2, [pc, #484]	; (8002efc <HAL_DMA_IRQHandler+0xc84>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d036      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a77      	ldr	r2, [pc, #476]	; (8002f00 <HAL_DMA_IRQHandler+0xc88>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a76      	ldr	r2, [pc, #472]	; (8002f04 <HAL_DMA_IRQHandler+0xc8c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d02c      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a74      	ldr	r2, [pc, #464]	; (8002f08 <HAL_DMA_IRQHandler+0xc90>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d027      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a73      	ldr	r2, [pc, #460]	; (8002f0c <HAL_DMA_IRQHandler+0xc94>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a71      	ldr	r2, [pc, #452]	; (8002f10 <HAL_DMA_IRQHandler+0xc98>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a70      	ldr	r2, [pc, #448]	; (8002f14 <HAL_DMA_IRQHandler+0xc9c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_DMA_IRQHandler+0xca0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6d      	ldr	r2, [pc, #436]	; (8002f1c <HAL_DMA_IRQHandler+0xca4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6b      	ldr	r2, [pc, #428]	; (8002f20 <HAL_DMA_IRQHandler+0xca8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_DMA_IRQHandler+0xcac>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d004      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xb12>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a68      	ldr	r2, [pc, #416]	; (8002f28 <HAL_DMA_IRQHandler+0xcb0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <HAL_DMA_IRQHandler+0xb24>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0208 	bic.w	r2, r2, #8
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e007      	b.n	8002dac <HAL_DMA_IRQHandler+0xb34>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0204 	bic.w	r2, r2, #4
 8002daa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8165 	beq.w	8003080 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dbe:	e15f      	b.n	8003080 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2202      	movs	r2, #2
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80c5 	beq.w	8002f60 <HAL_DMA_IRQHandler+0xce8>
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80bf 	beq.w	8002f60 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2202      	movs	r2, #2
 8002dec:	409a      	lsls	r2, r3
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 813a 	beq.w	8003084 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e18:	e134      	b.n	8003084 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8130 	beq.w	8003084 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e2c:	e12a      	b.n	8003084 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 8089 	bne.w	8002f4c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <HAL_DMA_IRQHandler+0xc74>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d04a      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <HAL_DMA_IRQHandler+0xc78>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d045      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_DMA_IRQHandler+0xc7c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d040      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_DMA_IRQHandler+0xc80>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d03b      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a25      	ldr	r2, [pc, #148]	; (8002efc <HAL_DMA_IRQHandler+0xc84>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <HAL_DMA_IRQHandler+0xc88>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <HAL_DMA_IRQHandler+0xc8c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d02c      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a20      	ldr	r2, [pc, #128]	; (8002f08 <HAL_DMA_IRQHandler+0xc90>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d027      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_DMA_IRQHandler+0xc94>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <HAL_DMA_IRQHandler+0xc98>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01d      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_DMA_IRQHandler+0xc9c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <HAL_DMA_IRQHandler+0xca0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_DMA_IRQHandler+0xca4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_DMA_IRQHandler+0xca8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <HAL_DMA_IRQHandler+0xcac>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_DMA_IRQHandler+0xc62>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <HAL_DMA_IRQHandler+0xcb0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d128      	bne.n	8002f2c <HAL_DMA_IRQHandler+0xcb4>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0214 	bic.w	r2, r2, #20
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e027      	b.n	8002f3c <HAL_DMA_IRQHandler+0xcc4>
 8002eec:	40020010 	.word	0x40020010
 8002ef0:	40020028 	.word	0x40020028
 8002ef4:	40020040 	.word	0x40020040
 8002ef8:	40020058 	.word	0x40020058
 8002efc:	40020070 	.word	0x40020070
 8002f00:	40020088 	.word	0x40020088
 8002f04:	400200a0 	.word	0x400200a0
 8002f08:	400200b8 	.word	0x400200b8
 8002f0c:	40020410 	.word	0x40020410
 8002f10:	40020428 	.word	0x40020428
 8002f14:	40020440 	.word	0x40020440
 8002f18:	40020458 	.word	0x40020458
 8002f1c:	40020470 	.word	0x40020470
 8002f20:	40020488 	.word	0x40020488
 8002f24:	400204a0 	.word	0x400204a0
 8002f28:	400204b8 	.word	0x400204b8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 020a 	bic.w	r2, r2, #10
 8002f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8097 	beq.w	8003084 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f5e:	e091      	b.n	8003084 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2208      	movs	r2, #8
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8088 	beq.w	8003086 <HAL_DMA_IRQHandler+0xe0e>
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8082 	beq.w	8003086 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a41      	ldr	r2, [pc, #260]	; (800308c <HAL_DMA_IRQHandler+0xe14>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d04a      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3f      	ldr	r2, [pc, #252]	; (8003090 <HAL_DMA_IRQHandler+0xe18>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d045      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <HAL_DMA_IRQHandler+0xe1c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d040      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <HAL_DMA_IRQHandler+0xe20>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d03b      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3b      	ldr	r2, [pc, #236]	; (800309c <HAL_DMA_IRQHandler+0xe24>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d036      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a39      	ldr	r2, [pc, #228]	; (80030a0 <HAL_DMA_IRQHandler+0xe28>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d031      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a38      	ldr	r2, [pc, #224]	; (80030a4 <HAL_DMA_IRQHandler+0xe2c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d02c      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a36      	ldr	r2, [pc, #216]	; (80030a8 <HAL_DMA_IRQHandler+0xe30>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d027      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a35      	ldr	r2, [pc, #212]	; (80030ac <HAL_DMA_IRQHandler+0xe34>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a33      	ldr	r2, [pc, #204]	; (80030b0 <HAL_DMA_IRQHandler+0xe38>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01d      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a32      	ldr	r2, [pc, #200]	; (80030b4 <HAL_DMA_IRQHandler+0xe3c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d018      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a30      	ldr	r2, [pc, #192]	; (80030b8 <HAL_DMA_IRQHandler+0xe40>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <HAL_DMA_IRQHandler+0xe44>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_DMA_IRQHandler+0xe48>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <HAL_DMA_IRQHandler+0xe4c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_DMA_IRQHandler+0xdaa>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <HAL_DMA_IRQHandler+0xe50>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d108      	bne.n	8003034 <HAL_DMA_IRQHandler+0xdbc>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 021c 	bic.w	r2, r2, #28
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e007      	b.n	8003044 <HAL_DMA_IRQHandler+0xdcc>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 020e 	bic.w	r2, r2, #14
 8003042:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2201      	movs	r2, #1
 800304e:	409a      	lsls	r2, r3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
 800307a:	e004      	b.n	8003086 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800307c:	bf00      	nop
 800307e:	e002      	b.n	8003086 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003080:	bf00      	nop
 8003082:	e000      	b.n	8003086 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003084:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003086:	3728      	adds	r7, #40	; 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40020010 	.word	0x40020010
 8003090:	40020028 	.word	0x40020028
 8003094:	40020040 	.word	0x40020040
 8003098:	40020058 	.word	0x40020058
 800309c:	40020070 	.word	0x40020070
 80030a0:	40020088 	.word	0x40020088
 80030a4:	400200a0 	.word	0x400200a0
 80030a8:	400200b8 	.word	0x400200b8
 80030ac:	40020410 	.word	0x40020410
 80030b0:	40020428 	.word	0x40020428
 80030b4:	40020440 	.word	0x40020440
 80030b8:	40020458 	.word	0x40020458
 80030bc:	40020470 	.word	0x40020470
 80030c0:	40020488 	.word	0x40020488
 80030c4:	400204a0 	.word	0x400204a0
 80030c8:	400204b8 	.word	0x400204b8

080030cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7f      	ldr	r2, [pc, #508]	; (80032e8 <DMA_SetConfig+0x21c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d072      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a7d      	ldr	r2, [pc, #500]	; (80032ec <DMA_SetConfig+0x220>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d06d      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7c      	ldr	r2, [pc, #496]	; (80032f0 <DMA_SetConfig+0x224>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d068      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7a      	ldr	r2, [pc, #488]	; (80032f4 <DMA_SetConfig+0x228>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d063      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a79      	ldr	r2, [pc, #484]	; (80032f8 <DMA_SetConfig+0x22c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d05e      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a77      	ldr	r2, [pc, #476]	; (80032fc <DMA_SetConfig+0x230>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d059      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a76      	ldr	r2, [pc, #472]	; (8003300 <DMA_SetConfig+0x234>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d054      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a74      	ldr	r2, [pc, #464]	; (8003304 <DMA_SetConfig+0x238>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d04f      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a73      	ldr	r2, [pc, #460]	; (8003308 <DMA_SetConfig+0x23c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d04a      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a71      	ldr	r2, [pc, #452]	; (800330c <DMA_SetConfig+0x240>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d045      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a70      	ldr	r2, [pc, #448]	; (8003310 <DMA_SetConfig+0x244>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d040      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6e      	ldr	r2, [pc, #440]	; (8003314 <DMA_SetConfig+0x248>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d03b      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6d      	ldr	r2, [pc, #436]	; (8003318 <DMA_SetConfig+0x24c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d036      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6b      	ldr	r2, [pc, #428]	; (800331c <DMA_SetConfig+0x250>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a6a      	ldr	r2, [pc, #424]	; (8003320 <DMA_SetConfig+0x254>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d02c      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a68      	ldr	r2, [pc, #416]	; (8003324 <DMA_SetConfig+0x258>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d027      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a67      	ldr	r2, [pc, #412]	; (8003328 <DMA_SetConfig+0x25c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a65      	ldr	r2, [pc, #404]	; (800332c <DMA_SetConfig+0x260>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a64      	ldr	r2, [pc, #400]	; (8003330 <DMA_SetConfig+0x264>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a62      	ldr	r2, [pc, #392]	; (8003334 <DMA_SetConfig+0x268>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a61      	ldr	r2, [pc, #388]	; (8003338 <DMA_SetConfig+0x26c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a5f      	ldr	r2, [pc, #380]	; (800333c <DMA_SetConfig+0x270>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <DMA_SetConfig+0x274>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <DMA_SetConfig+0x10a>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5c      	ldr	r2, [pc, #368]	; (8003344 <DMA_SetConfig+0x278>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <DMA_SetConfig+0x10e>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <DMA_SetConfig+0x110>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a39      	ldr	r2, [pc, #228]	; (80032e8 <DMA_SetConfig+0x21c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d04a      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a38      	ldr	r2, [pc, #224]	; (80032ec <DMA_SetConfig+0x220>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d045      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a36      	ldr	r2, [pc, #216]	; (80032f0 <DMA_SetConfig+0x224>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d040      	beq.n	800329c <DMA_SetConfig+0x1d0>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a35      	ldr	r2, [pc, #212]	; (80032f4 <DMA_SetConfig+0x228>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d03b      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a33      	ldr	r2, [pc, #204]	; (80032f8 <DMA_SetConfig+0x22c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d036      	beq.n	800329c <DMA_SetConfig+0x1d0>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a32      	ldr	r2, [pc, #200]	; (80032fc <DMA_SetConfig+0x230>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d031      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <DMA_SetConfig+0x234>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02c      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <DMA_SetConfig+0x238>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d027      	beq.n	800329c <DMA_SetConfig+0x1d0>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2d      	ldr	r2, [pc, #180]	; (8003308 <DMA_SetConfig+0x23c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d022      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2c      	ldr	r2, [pc, #176]	; (800330c <DMA_SetConfig+0x240>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d01d      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <DMA_SetConfig+0x244>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d018      	beq.n	800329c <DMA_SetConfig+0x1d0>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a29      	ldr	r2, [pc, #164]	; (8003314 <DMA_SetConfig+0x248>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a27      	ldr	r2, [pc, #156]	; (8003318 <DMA_SetConfig+0x24c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00e      	beq.n	800329c <DMA_SetConfig+0x1d0>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a26      	ldr	r2, [pc, #152]	; (800331c <DMA_SetConfig+0x250>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a24      	ldr	r2, [pc, #144]	; (8003320 <DMA_SetConfig+0x254>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <DMA_SetConfig+0x1d0>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a23      	ldr	r2, [pc, #140]	; (8003324 <DMA_SetConfig+0x258>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <DMA_SetConfig+0x1d4>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <DMA_SetConfig+0x1d6>
 80032a0:	2300      	movs	r3, #0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d059      	beq.n	800335a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	223f      	movs	r2, #63	; 0x3f
 80032b0:	409a      	lsls	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d138      	bne.n	8003348 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80032e6:	e086      	b.n	80033f6 <DMA_SetConfig+0x32a>
 80032e8:	40020010 	.word	0x40020010
 80032ec:	40020028 	.word	0x40020028
 80032f0:	40020040 	.word	0x40020040
 80032f4:	40020058 	.word	0x40020058
 80032f8:	40020070 	.word	0x40020070
 80032fc:	40020088 	.word	0x40020088
 8003300:	400200a0 	.word	0x400200a0
 8003304:	400200b8 	.word	0x400200b8
 8003308:	40020410 	.word	0x40020410
 800330c:	40020428 	.word	0x40020428
 8003310:	40020440 	.word	0x40020440
 8003314:	40020458 	.word	0x40020458
 8003318:	40020470 	.word	0x40020470
 800331c:	40020488 	.word	0x40020488
 8003320:	400204a0 	.word	0x400204a0
 8003324:	400204b8 	.word	0x400204b8
 8003328:	58025408 	.word	0x58025408
 800332c:	5802541c 	.word	0x5802541c
 8003330:	58025430 	.word	0x58025430
 8003334:	58025444 	.word	0x58025444
 8003338:	58025458 	.word	0x58025458
 800333c:	5802546c 	.word	0x5802546c
 8003340:	58025480 	.word	0x58025480
 8003344:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
}
 8003358:	e04d      	b.n	80033f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <DMA_SetConfig+0x338>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <DMA_SetConfig+0x2de>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a27      	ldr	r2, [pc, #156]	; (8003408 <DMA_SetConfig+0x33c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01d      	beq.n	80033aa <DMA_SetConfig+0x2de>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a26      	ldr	r2, [pc, #152]	; (800340c <DMA_SetConfig+0x340>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d018      	beq.n	80033aa <DMA_SetConfig+0x2de>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <DMA_SetConfig+0x344>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <DMA_SetConfig+0x2de>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a23      	ldr	r2, [pc, #140]	; (8003414 <DMA_SetConfig+0x348>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00e      	beq.n	80033aa <DMA_SetConfig+0x2de>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a21      	ldr	r2, [pc, #132]	; (8003418 <DMA_SetConfig+0x34c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d009      	beq.n	80033aa <DMA_SetConfig+0x2de>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a20      	ldr	r2, [pc, #128]	; (800341c <DMA_SetConfig+0x350>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <DMA_SetConfig+0x2de>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <DMA_SetConfig+0x354>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <DMA_SetConfig+0x2e2>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <DMA_SetConfig+0x2e4>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d108      	bne.n	80033e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	60da      	str	r2, [r3, #12]
}
 80033e4:	e007      	b.n	80033f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	60da      	str	r2, [r3, #12]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	58025408 	.word	0x58025408
 8003408:	5802541c 	.word	0x5802541c
 800340c:	58025430 	.word	0x58025430
 8003410:	58025444 	.word	0x58025444
 8003414:	58025458 	.word	0x58025458
 8003418:	5802546c 	.word	0x5802546c
 800341c:	58025480 	.word	0x58025480
 8003420:	58025494 	.word	0x58025494

08003424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a42      	ldr	r2, [pc, #264]	; (800353c <DMA_CalcBaseAndBitshift+0x118>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d04a      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a41      	ldr	r2, [pc, #260]	; (8003540 <DMA_CalcBaseAndBitshift+0x11c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d045      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a3f      	ldr	r2, [pc, #252]	; (8003544 <DMA_CalcBaseAndBitshift+0x120>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d040      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a3e      	ldr	r2, [pc, #248]	; (8003548 <DMA_CalcBaseAndBitshift+0x124>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d03b      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a3c      	ldr	r2, [pc, #240]	; (800354c <DMA_CalcBaseAndBitshift+0x128>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d036      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a3b      	ldr	r2, [pc, #236]	; (8003550 <DMA_CalcBaseAndBitshift+0x12c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d031      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a39      	ldr	r2, [pc, #228]	; (8003554 <DMA_CalcBaseAndBitshift+0x130>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02c      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a38      	ldr	r2, [pc, #224]	; (8003558 <DMA_CalcBaseAndBitshift+0x134>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d027      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a36      	ldr	r2, [pc, #216]	; (800355c <DMA_CalcBaseAndBitshift+0x138>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d022      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a35      	ldr	r2, [pc, #212]	; (8003560 <DMA_CalcBaseAndBitshift+0x13c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d01d      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a33      	ldr	r2, [pc, #204]	; (8003564 <DMA_CalcBaseAndBitshift+0x140>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d018      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a32      	ldr	r2, [pc, #200]	; (8003568 <DMA_CalcBaseAndBitshift+0x144>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a30      	ldr	r2, [pc, #192]	; (800356c <DMA_CalcBaseAndBitshift+0x148>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2f      	ldr	r2, [pc, #188]	; (8003570 <DMA_CalcBaseAndBitshift+0x14c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2d      	ldr	r2, [pc, #180]	; (8003574 <DMA_CalcBaseAndBitshift+0x150>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <DMA_CalcBaseAndBitshift+0xa8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2c      	ldr	r2, [pc, #176]	; (8003578 <DMA_CalcBaseAndBitshift+0x154>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <DMA_CalcBaseAndBitshift+0xac>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <DMA_CalcBaseAndBitshift+0xae>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d024      	beq.n	8003520 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3b10      	subs	r3, #16
 80034de:	4a27      	ldr	r2, [pc, #156]	; (800357c <DMA_CalcBaseAndBitshift+0x158>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	4a24      	ldr	r2, [pc, #144]	; (8003580 <DMA_CalcBaseAndBitshift+0x15c>)
 80034f0:	5cd3      	ldrb	r3, [r2, r3]
 80034f2:	461a      	mov	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d908      	bls.n	8003510 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <DMA_CalcBaseAndBitshift+0x160>)
 8003506:	4013      	ands	r3, r2
 8003508:	1d1a      	adds	r2, r3, #4
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	659a      	str	r2, [r3, #88]	; 0x58
 800350e:	e00d      	b.n	800352c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <DMA_CalcBaseAndBitshift+0x160>)
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6593      	str	r3, [r2, #88]	; 0x58
 800351e:	e005      	b.n	800352c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40020010 	.word	0x40020010
 8003540:	40020028 	.word	0x40020028
 8003544:	40020040 	.word	0x40020040
 8003548:	40020058 	.word	0x40020058
 800354c:	40020070 	.word	0x40020070
 8003550:	40020088 	.word	0x40020088
 8003554:	400200a0 	.word	0x400200a0
 8003558:	400200b8 	.word	0x400200b8
 800355c:	40020410 	.word	0x40020410
 8003560:	40020428 	.word	0x40020428
 8003564:	40020440 	.word	0x40020440
 8003568:	40020458 	.word	0x40020458
 800356c:	40020470 	.word	0x40020470
 8003570:	40020488 	.word	0x40020488
 8003574:	400204a0 	.word	0x400204a0
 8003578:	400204b8 	.word	0x400204b8
 800357c:	aaaaaaab 	.word	0xaaaaaaab
 8003580:	08006414 	.word	0x08006414
 8003584:	fffffc00 	.word	0xfffffc00

08003588 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d120      	bne.n	80035de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d858      	bhi.n	8003656 <DMA_CheckFifoParam+0xce>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <DMA_CheckFifoParam+0x24>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035cf 	.word	0x080035cf
 80035b4:	080035bd 	.word	0x080035bd
 80035b8:	08003657 	.word	0x08003657
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d048      	beq.n	800365a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035cc:	e045      	b.n	800365a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035d6:	d142      	bne.n	800365e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035dc:	e03f      	b.n	800365e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e6:	d123      	bne.n	8003630 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d838      	bhi.n	8003662 <DMA_CheckFifoParam+0xda>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <DMA_CheckFifoParam+0x70>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	08003609 	.word	0x08003609
 80035fc:	0800360f 	.word	0x0800360f
 8003600:	08003609 	.word	0x08003609
 8003604:	08003621 	.word	0x08003621
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
        break;
 800360c:	e030      	b.n	8003670 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d025      	beq.n	8003666 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800361e:	e022      	b.n	8003666 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003628:	d11f      	bne.n	800366a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800362e:	e01c      	b.n	800366a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	2b02      	cmp	r3, #2
 8003636:	d902      	bls.n	800363e <DMA_CheckFifoParam+0xb6>
 8003638:	2b03      	cmp	r3, #3
 800363a:	d003      	beq.n	8003644 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800363c:	e018      	b.n	8003670 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
        break;
 8003642:	e015      	b.n	8003670 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00e      	beq.n	800366e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
    break;
 8003654:	e00b      	b.n	800366e <DMA_CheckFifoParam+0xe6>
        break;
 8003656:	bf00      	nop
 8003658:	e00a      	b.n	8003670 <DMA_CheckFifoParam+0xe8>
        break;
 800365a:	bf00      	nop
 800365c:	e008      	b.n	8003670 <DMA_CheckFifoParam+0xe8>
        break;
 800365e:	bf00      	nop
 8003660:	e006      	b.n	8003670 <DMA_CheckFifoParam+0xe8>
        break;
 8003662:	bf00      	nop
 8003664:	e004      	b.n	8003670 <DMA_CheckFifoParam+0xe8>
        break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <DMA_CheckFifoParam+0xe8>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <DMA_CheckFifoParam+0xe8>
    break;
 800366e:	bf00      	nop
    }
  }

  return status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop

08003680 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a38      	ldr	r2, [pc, #224]	; (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a36      	ldr	r2, [pc, #216]	; (8003778 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a35      	ldr	r2, [pc, #212]	; (800377c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a33      	ldr	r2, [pc, #204]	; (8003780 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a32      	ldr	r2, [pc, #200]	; (8003784 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a30      	ldr	r2, [pc, #192]	; (8003788 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2f      	ldr	r2, [pc, #188]	; (800378c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2d      	ldr	r2, [pc, #180]	; (8003790 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01a      	beq.n	800371e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3b08      	subs	r3, #8
 80036f0:	4a28      	ldr	r2, [pc, #160]	; (8003794 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4b26      	ldr	r3, [pc, #152]	; (8003798 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	461a      	mov	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a24      	ldr	r2, [pc, #144]	; (800379c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800370c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2201      	movs	r2, #1
 8003716:	409a      	lsls	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800371c:	e024      	b.n	8003768 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3b10      	subs	r3, #16
 8003726:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d806      	bhi.n	8003746 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d902      	bls.n	8003746 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3308      	adds	r3, #8
 8003744:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4b18      	ldr	r3, [pc, #96]	; (80037ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	461a      	mov	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003758:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2201      	movs	r2, #1
 8003762:	409a      	lsls	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	58025408 	.word	0x58025408
 8003778:	5802541c 	.word	0x5802541c
 800377c:	58025430 	.word	0x58025430
 8003780:	58025444 	.word	0x58025444
 8003784:	58025458 	.word	0x58025458
 8003788:	5802546c 	.word	0x5802546c
 800378c:	58025480 	.word	0x58025480
 8003790:	58025494 	.word	0x58025494
 8003794:	cccccccd 	.word	0xcccccccd
 8003798:	16009600 	.word	0x16009600
 800379c:	58025880 	.word	0x58025880
 80037a0:	aaaaaaab 	.word	0xaaaaaaab
 80037a4:	400204b8 	.word	0x400204b8
 80037a8:	4002040f 	.word	0x4002040f
 80037ac:	10008200 	.word	0x10008200
 80037b0:	40020880 	.word	0x40020880

080037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04a      	beq.n	8003860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d847      	bhi.n	8003860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a25      	ldr	r2, [pc, #148]	; (800386c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d022      	beq.n	8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a24      	ldr	r2, [pc, #144]	; (8003870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d01d      	beq.n	8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a22      	ldr	r2, [pc, #136]	; (8003874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a21      	ldr	r2, [pc, #132]	; (8003878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003824:	2300      	movs	r3, #0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	461a      	mov	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800383c:	671a      	str	r2, [r3, #112]	; 0x70
 800383e:	e009      	b.n	8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a11      	ldr	r2, [pc, #68]	; (8003898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003852:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3b01      	subs	r3, #1
 8003858:	2201      	movs	r2, #1
 800385a:	409a      	lsls	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	58025408 	.word	0x58025408
 8003870:	5802541c 	.word	0x5802541c
 8003874:	58025430 	.word	0x58025430
 8003878:	58025444 	.word	0x58025444
 800387c:	58025458 	.word	0x58025458
 8003880:	5802546c 	.word	0x5802546c
 8003884:	58025480 	.word	0x58025480
 8003888:	58025494 	.word	0x58025494
 800388c:	1600963f 	.word	0x1600963f
 8003890:	58025940 	.word	0x58025940
 8003894:	1000823f 	.word	0x1000823f
 8003898:	40020940 	.word	0x40020940

0800389c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038aa:	4b89      	ldr	r3, [pc, #548]	; (8003ad0 <HAL_GPIO_Init+0x234>)
 80038ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ae:	e194      	b.n	8003bda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2101      	movs	r1, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8186 	beq.w	8003bd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d005      	beq.n	80038e0 <HAL_GPIO_Init+0x44>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d130      	bne.n	8003942 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003916:	2201      	movs	r2, #1
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0201 	and.w	r2, r3, #1
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b03      	cmp	r3, #3
 800394c:	d017      	beq.n	800397e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d123      	bne.n	80039d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	08da      	lsrs	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3208      	adds	r2, #8
 8003992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	08da      	lsrs	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3208      	adds	r2, #8
 80039cc:	69b9      	ldr	r1, [r7, #24]
 80039ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0203 	and.w	r2, r3, #3
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80e0 	beq.w	8003bd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a14:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <HAL_GPIO_Init+0x238>)
 8003a16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a1a:	4a2e      	ldr	r2, [pc, #184]	; (8003ad4 <HAL_GPIO_Init+0x238>)
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a24:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <HAL_GPIO_Init+0x238>)
 8003a26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a32:	4a29      	ldr	r2, [pc, #164]	; (8003ad8 <HAL_GPIO_Init+0x23c>)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	3302      	adds	r3, #2
 8003a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	220f      	movs	r2, #15
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <HAL_GPIO_Init+0x240>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d052      	beq.n	8003b04 <HAL_GPIO_Init+0x268>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <HAL_GPIO_Init+0x244>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d031      	beq.n	8003aca <HAL_GPIO_Init+0x22e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <HAL_GPIO_Init+0x248>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02b      	beq.n	8003ac6 <HAL_GPIO_Init+0x22a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <HAL_GPIO_Init+0x24c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d025      	beq.n	8003ac2 <HAL_GPIO_Init+0x226>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <HAL_GPIO_Init+0x250>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <HAL_GPIO_Init+0x222>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_GPIO_Init+0x254>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x21e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_GPIO_Init+0x258>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x21a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <HAL_GPIO_Init+0x25c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x216>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a18      	ldr	r2, [pc, #96]	; (8003afc <HAL_GPIO_Init+0x260>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x212>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <HAL_GPIO_Init+0x264>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x20e>
 8003aa6:	2309      	movs	r3, #9
 8003aa8:	e02d      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003aaa:	230a      	movs	r3, #10
 8003aac:	e02b      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003aae:	2308      	movs	r3, #8
 8003ab0:	e029      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003ab2:	2307      	movs	r3, #7
 8003ab4:	e027      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003ab6:	2306      	movs	r3, #6
 8003ab8:	e025      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003aba:	2305      	movs	r3, #5
 8003abc:	e023      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003abe:	2304      	movs	r3, #4
 8003ac0:	e021      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e01f      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e01d      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e01b      	b.n	8003b06 <HAL_GPIO_Init+0x26a>
 8003ace:	bf00      	nop
 8003ad0:	58000080 	.word	0x58000080
 8003ad4:	58024400 	.word	0x58024400
 8003ad8:	58000400 	.word	0x58000400
 8003adc:	58020000 	.word	0x58020000
 8003ae0:	58020400 	.word	0x58020400
 8003ae4:	58020800 	.word	0x58020800
 8003ae8:	58020c00 	.word	0x58020c00
 8003aec:	58021000 	.word	0x58021000
 8003af0:	58021400 	.word	0x58021400
 8003af4:	58021800 	.word	0x58021800
 8003af8:	58021c00 	.word	0x58021c00
 8003afc:	58022000 	.word	0x58022000
 8003b00:	58022400 	.word	0x58022400
 8003b04:	2300      	movs	r3, #0
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	f002 0203 	and.w	r2, r2, #3
 8003b0c:	0092      	lsls	r2, r2, #2
 8003b0e:	4093      	lsls	r3, r2
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b16:	4938      	ldr	r1, [pc, #224]	; (8003bf8 <HAL_GPIO_Init+0x35c>)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f47f ae63 	bne.w	80038b0 <HAL_GPIO_Init+0x14>
  }
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	3724      	adds	r7, #36	; 0x24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	58000400 	.word	0x58000400

08003bfc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_PWREx_ConfigSupply+0x70>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d00a      	beq.n	8003c26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <HAL_PWREx_ConfigSupply+0x70>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d001      	beq.n	8003c22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e01f      	b.n	8003c62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e01d      	b.n	8003c62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_PWREx_ConfigSupply+0x70>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	490f      	ldr	r1, [pc, #60]	; (8003c6c <HAL_PWREx_ConfigSupply+0x70>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c36:	f7fd f9c7 	bl	8000fc8 <HAL_GetTick>
 8003c3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c3c:	e009      	b.n	8003c52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c3e:	f7fd f9c3 	bl	8000fc8 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c4c:	d901      	bls.n	8003c52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e007      	b.n	8003c62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_PWREx_ConfigSupply+0x70>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5e:	d1ee      	bne.n	8003c3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	58024800 	.word	0x58024800

08003c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	; 0x30
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f000 bc48 	b.w	8004514 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8088 	beq.w	8003da2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c92:	4b99      	ldr	r3, [pc, #612]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c9c:	4b96      	ldr	r3, [pc, #600]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d007      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x48>
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	2b18      	cmp	r3, #24
 8003cac:	d111      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x62>
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	4b8f      	ldr	r3, [pc, #572]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d06d      	beq.n	8003da0 <HAL_RCC_OscConfig+0x130>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d169      	bne.n	8003da0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f000 bc21 	b.w	8004514 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cda:	d106      	bne.n	8003cea <HAL_RCC_OscConfig+0x7a>
 8003cdc:	4b86      	ldr	r3, [pc, #536]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a85      	ldr	r2, [pc, #532]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	e02e      	b.n	8003d48 <HAL_RCC_OscConfig+0xd8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x9c>
 8003cf2:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a80      	ldr	r2, [pc, #512]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b7e      	ldr	r3, [pc, #504]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7d      	ldr	r2, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e01d      	b.n	8003d48 <HAL_RCC_OscConfig+0xd8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0xc0>
 8003d16:	4b78      	ldr	r3, [pc, #480]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a77      	ldr	r2, [pc, #476]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b75      	ldr	r3, [pc, #468]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a74      	ldr	r2, [pc, #464]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCC_OscConfig+0xd8>
 8003d30:	4b71      	ldr	r3, [pc, #452]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a70      	ldr	r2, [pc, #448]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6d      	ldr	r2, [pc, #436]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd f93a 	bl	8000fc8 <HAL_GetTick>
 8003d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd f936 	bl	8000fc8 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e3d4      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0xe8>
 8003d76:	e014      	b.n	8003da2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fd f926 	bl	8000fc8 <HAL_GetTick>
 8003d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fd f922 	bl	8000fc8 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e3c0      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d92:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x110>
 8003d9e:	e000      	b.n	8003da2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80ca 	beq.w	8003f44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db0:	4b51      	ldr	r3, [pc, #324]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dba:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x166>
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	2b18      	cmp	r3, #24
 8003dca:	d156      	bne.n	8003e7a <HAL_RCC_OscConfig+0x20a>
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d151      	bne.n	8003e7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd6:	4b48      	ldr	r3, [pc, #288]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_RCC_OscConfig+0x17e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e392      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 0219 	bic.w	r2, r3, #25
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	493f      	ldr	r1, [pc, #252]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd f8e2 	bl	8000fc8 <HAL_GetTick>
 8003e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fd f8de 	bl	8000fc8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e37c      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	f7fd f8ff 	bl	8001028 <HAL_GetREVID>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d817      	bhi.n	8003e64 <HAL_RCC_OscConfig+0x1f4>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d108      	bne.n	8003e4e <HAL_RCC_OscConfig+0x1de>
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e44:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e4c:	e07a      	b.n	8003f44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	031b      	lsls	r3, r3, #12
 8003e5c:	4926      	ldr	r1, [pc, #152]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e62:	e06f      	b.n	8003f44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	4921      	ldr	r1, [pc, #132]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e78:	e064      	b.n	8003f44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d047      	beq.n	8003f12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 0219 	bic.w	r2, r3, #25
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	491a      	ldr	r1, [pc, #104]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd f898 	bl	8000fc8 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fd f894 	bl	8000fc8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e332      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	f7fd f8b5 	bl	8001028 <HAL_GetREVID>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d819      	bhi.n	8003efc <HAL_RCC_OscConfig+0x28c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d108      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x272>
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ed8:	4a07      	ldr	r2, [pc, #28]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ede:	6053      	str	r3, [r2, #4]
 8003ee0:	e030      	b.n	8003f44 <HAL_RCC_OscConfig+0x2d4>
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	031b      	lsls	r3, r3, #12
 8003ef0:	4901      	ldr	r1, [pc, #4]	; (8003ef8 <HAL_RCC_OscConfig+0x288>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
 8003ef6:	e025      	b.n	8003f44 <HAL_RCC_OscConfig+0x2d4>
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	4b9a      	ldr	r3, [pc, #616]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	061b      	lsls	r3, r3, #24
 8003f0a:	4997      	ldr	r1, [pc, #604]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
 8003f10:	e018      	b.n	8003f44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f12:	4b95      	ldr	r3, [pc, #596]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a94      	ldr	r2, [pc, #592]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1e:	f7fd f853 	bl	8000fc8 <HAL_GetTick>
 8003f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f26:	f7fd f84f 	bl	8000fc8 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e2ed      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f38:	4b8b      	ldr	r3, [pc, #556]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80a9 	beq.w	80040a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f52:	4b85      	ldr	r3, [pc, #532]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f5c:	4b82      	ldr	r3, [pc, #520]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d007      	beq.n	8003f78 <HAL_RCC_OscConfig+0x308>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b18      	cmp	r3, #24
 8003f6c:	d13a      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x374>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d135      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f78:	4b7b      	ldr	r3, [pc, #492]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_OscConfig+0x320>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e2c1      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f90:	f7fd f84a 	bl	8001028 <HAL_GetREVID>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d817      	bhi.n	8003fce <HAL_RCC_OscConfig+0x35e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d108      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x348>
 8003fa6:	4b70      	ldr	r3, [pc, #448]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003fae:	4a6e      	ldr	r2, [pc, #440]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fb6:	e075      	b.n	80040a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fb8:	4b6b      	ldr	r3, [pc, #428]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	069b      	lsls	r3, r3, #26
 8003fc6:	4968      	ldr	r1, [pc, #416]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fcc:	e06a      	b.n	80040a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fce:	4b66      	ldr	r3, [pc, #408]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	4962      	ldr	r1, [pc, #392]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fe2:	e05f      	b.n	80040a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d042      	beq.n	8004072 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003fec:	4b5e      	ldr	r3, [pc, #376]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8003ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fc ffe6 	bl	8000fc8 <HAL_GetTick>
 8003ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004000:	f7fc ffe2 	bl	8000fc8 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e280      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004012:	4b55      	ldr	r3, [pc, #340]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800401e:	f7fd f803 	bl	8001028 <HAL_GetREVID>
 8004022:	4603      	mov	r3, r0
 8004024:	f241 0203 	movw	r2, #4099	; 0x1003
 8004028:	4293      	cmp	r3, r2
 800402a:	d817      	bhi.n	800405c <HAL_RCC_OscConfig+0x3ec>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	2b20      	cmp	r3, #32
 8004032:	d108      	bne.n	8004046 <HAL_RCC_OscConfig+0x3d6>
 8004034:	4b4c      	ldr	r3, [pc, #304]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800403c:	4a4a      	ldr	r2, [pc, #296]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 800403e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004042:	6053      	str	r3, [r2, #4]
 8004044:	e02e      	b.n	80040a4 <HAL_RCC_OscConfig+0x434>
 8004046:	4b48      	ldr	r3, [pc, #288]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	069b      	lsls	r3, r3, #26
 8004054:	4944      	ldr	r1, [pc, #272]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
 800405a:	e023      	b.n	80040a4 <HAL_RCC_OscConfig+0x434>
 800405c:	4b42      	ldr	r3, [pc, #264]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	061b      	lsls	r3, r3, #24
 800406a:	493f      	ldr	r1, [pc, #252]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 800406c:	4313      	orrs	r3, r2
 800406e:	60cb      	str	r3, [r1, #12]
 8004070:	e018      	b.n	80040a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004072:	4b3d      	ldr	r3, [pc, #244]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3c      	ldr	r2, [pc, #240]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fc ffa3 	bl	8000fc8 <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004086:	f7fc ff9f 	bl	8000fc8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e23d      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004098:	4b33      	ldr	r3, [pc, #204]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d036      	beq.n	800411e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d019      	beq.n	80040ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c4:	f7fc ff80 	bl	8000fc8 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040cc:	f7fc ff7c 	bl	8000fc8 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e21a      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040de:	4b22      	ldr	r3, [pc, #136]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 80040e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x45c>
 80040ea:	e018      	b.n	800411e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ec:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fc ff66 	bl	8000fc8 <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fc ff62 	bl	8000fc8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e200      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d039      	beq.n	800419e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01c      	beq.n	800416c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 8004138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800413c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800413e:	f7fc ff43 	bl	8000fc8 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004146:	f7fc ff3f 	bl	8000fc8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1dd      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_RCC_OscConfig+0x4f8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x4d6>
 8004164:	e01b      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
 8004166:	bf00      	nop
 8004168:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800416c:	4b9b      	ldr	r3, [pc, #620]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a9a      	ldr	r2, [pc, #616]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004176:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004178:	f7fc ff26 	bl	8000fc8 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004180:	f7fc ff22 	bl	8000fc8 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e1c0      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004192:	4b92      	ldr	r3, [pc, #584]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8081 	beq.w	80042ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041ac:	4b8c      	ldr	r3, [pc, #560]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a8b      	ldr	r2, [pc, #556]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b8:	f7fc ff06 	bl	8000fc8 <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fc ff02 	bl	8000fc8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1a0      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041d2:	4b83      	ldr	r3, [pc, #524]	; (80043e0 <HAL_RCC_OscConfig+0x770>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d106      	bne.n	80041f4 <HAL_RCC_OscConfig+0x584>
 80041e6:	4b7d      	ldr	r3, [pc, #500]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	4a7c      	ldr	r2, [pc, #496]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
 80041f2:	e02d      	b.n	8004250 <HAL_RCC_OscConfig+0x5e0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10c      	bne.n	8004216 <HAL_RCC_OscConfig+0x5a6>
 80041fc:	4b77      	ldr	r3, [pc, #476]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4a76      	ldr	r2, [pc, #472]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	6713      	str	r3, [r2, #112]	; 0x70
 8004208:	4b74      	ldr	r3, [pc, #464]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	4a73      	ldr	r2, [pc, #460]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800420e:	f023 0304 	bic.w	r3, r3, #4
 8004212:	6713      	str	r3, [r2, #112]	; 0x70
 8004214:	e01c      	b.n	8004250 <HAL_RCC_OscConfig+0x5e0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x5c8>
 800421e:	4b6f      	ldr	r3, [pc, #444]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a6e      	ldr	r2, [pc, #440]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	4b6c      	ldr	r3, [pc, #432]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a6b      	ldr	r2, [pc, #428]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0x5e0>
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a67      	ldr	r2, [pc, #412]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	4b65      	ldr	r3, [pc, #404]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a64      	ldr	r2, [pc, #400]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800424a:	f023 0304 	bic.w	r3, r3, #4
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fc feb6 	bl	8000fc8 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f7fc feb2 	bl	8000fc8 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e14e      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004276:	4b59      	ldr	r3, [pc, #356]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ee      	beq.n	8004260 <HAL_RCC_OscConfig+0x5f0>
 8004282:	e014      	b.n	80042ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fc fea0 	bl	8000fc8 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fc fe9c 	bl	8000fc8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e138      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042a2:	4b4e      	ldr	r3, [pc, #312]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ee      	bne.n	800428c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 812d 	beq.w	8004512 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042b8:	4b48      	ldr	r3, [pc, #288]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042c0:	2b18      	cmp	r3, #24
 80042c2:	f000 80bd 	beq.w	8004440 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	f040 809e 	bne.w	800440c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d0:	4b42      	ldr	r3, [pc, #264]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a41      	ldr	r2, [pc, #260]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80042d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fc fe74 	bl	8000fc8 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fc fe70 	bl	8000fc8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e10e      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004302:	4b36      	ldr	r3, [pc, #216]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004306:	4b37      	ldr	r3, [pc, #220]	; (80043e4 <HAL_RCC_OscConfig+0x774>)
 8004308:	4013      	ands	r3, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004312:	0112      	lsls	r2, r2, #4
 8004314:	430a      	orrs	r2, r1
 8004316:	4931      	ldr	r1, [pc, #196]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	628b      	str	r3, [r1, #40]	; 0x28
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	3b01      	subs	r3, #1
 8004322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	3b01      	subs	r3, #1
 800432c:	025b      	lsls	r3, r3, #9
 800432e:	b29b      	uxth	r3, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	3b01      	subs	r3, #1
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	3b01      	subs	r3, #1
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800434c:	4923      	ldr	r1, [pc, #140]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004352:	4b22      	ldr	r3, [pc, #136]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <HAL_RCC_OscConfig+0x778>)
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800436a:	00d2      	lsls	r2, r2, #3
 800436c:	491b      	ldr	r1, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	f023 020c 	bic.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	4917      	ldr	r1, [pc, #92]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	f023 0202 	bic.w	r2, r3, #2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	4912      	ldr	r1, [pc, #72]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	4a10      	ldr	r2, [pc, #64]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a2:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80043a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80043b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	4a07      	ldr	r2, [pc, #28]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_RCC_OscConfig+0x76c>)
 80043cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fc fdf9 	bl	8000fc8 <HAL_GetTick>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043d8:	e011      	b.n	80043fe <HAL_RCC_OscConfig+0x78e>
 80043da:	bf00      	nop
 80043dc:	58024400 	.word	0x58024400
 80043e0:	58024800 	.word	0x58024800
 80043e4:	fffffc0c 	.word	0xfffffc0c
 80043e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fc fdec 	bl	8000fc8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e08a      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043fe:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x77c>
 800440a:	e082      	b.n	8004512 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440c:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a42      	ldr	r2, [pc, #264]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 8004412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fc fdd6 	bl	8000fc8 <HAL_GetTick>
 800441c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fc fdd2 	bl	8000fc8 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e070      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004432:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x7b0>
 800443e:	e068      	b.n	8004512 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004440:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004446:	4b35      	ldr	r3, [pc, #212]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b01      	cmp	r3, #1
 8004452:	d031      	beq.n	80044b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f003 0203 	and.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d12a      	bne.n	80044b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d122      	bne.n	80044b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d11a      	bne.n	80044b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	0a5b      	lsrs	r3, r3, #9
 8004486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d111      	bne.n	80044b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d108      	bne.n	80044b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	0e1b      	lsrs	r3, r3, #24
 80044aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e02b      	b.n	8004514 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	08db      	lsrs	r3, r3, #3
 80044c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d01f      	beq.n	8004512 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	4a11      	ldr	r2, [pc, #68]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044de:	f7fc fd73 	bl	8000fc8 <HAL_GetTick>
 80044e2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80044e4:	bf00      	nop
 80044e6:	f7fc fd6f 	bl	8000fc8 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d0f9      	beq.n	80044e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 80044f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <HAL_RCC_OscConfig+0x8b0>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044fe:	00d2      	lsls	r2, r2, #3
 8004500:	4906      	ldr	r1, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 8004502:	4313      	orrs	r3, r2
 8004504:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	4a04      	ldr	r2, [pc, #16]	; (800451c <HAL_RCC_OscConfig+0x8ac>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3730      	adds	r7, #48	; 0x30
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	58024400 	.word	0x58024400
 8004520:	ffff0007 	.word	0xffff0007

08004524 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e19c      	b.n	8004872 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b8a      	ldr	r3, [pc, #552]	; (8004764 <HAL_RCC_ClockConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d910      	bls.n	8004568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b87      	ldr	r3, [pc, #540]	; (8004764 <HAL_RCC_ClockConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 020f 	bic.w	r2, r3, #15
 800454e:	4985      	ldr	r1, [pc, #532]	; (8004764 <HAL_RCC_ClockConfig+0x240>)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b83      	ldr	r3, [pc, #524]	; (8004764 <HAL_RCC_ClockConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e184      	b.n	8004872 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d010      	beq.n	8004596 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	4b7b      	ldr	r3, [pc, #492]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004580:	429a      	cmp	r2, r3
 8004582:	d908      	bls.n	8004596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004584:	4b78      	ldr	r3, [pc, #480]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4975      	ldr	r1, [pc, #468]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004592:	4313      	orrs	r3, r2
 8004594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	4b70      	ldr	r3, [pc, #448]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d908      	bls.n	80045c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045b2:	4b6d      	ldr	r3, [pc, #436]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	496a      	ldr	r1, [pc, #424]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	4b64      	ldr	r3, [pc, #400]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045dc:	429a      	cmp	r2, r3
 80045de:	d908      	bls.n	80045f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045e0:	4b61      	ldr	r3, [pc, #388]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	495e      	ldr	r1, [pc, #376]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800460a:	429a      	cmp	r2, r3
 800460c:	d908      	bls.n	8004620 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800460e:	4b56      	ldr	r3, [pc, #344]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	4953      	ldr	r1, [pc, #332]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 800461c:	4313      	orrs	r3, r2
 800461e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d010      	beq.n	800464e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	4b4d      	ldr	r3, [pc, #308]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	429a      	cmp	r2, r3
 800463a:	d908      	bls.n	800464e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463c:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f023 020f 	bic.w	r2, r3, #15
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4947      	ldr	r1, [pc, #284]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 800464a:	4313      	orrs	r3, r2
 800464c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d055      	beq.n	8004706 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800465a:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4940      	ldr	r1, [pc, #256]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004668:	4313      	orrs	r3, r2
 800466a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d107      	bne.n	8004684 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004674:	4b3c      	ldr	r3, [pc, #240]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d121      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0f6      	b.n	8004872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d107      	bne.n	800469c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d115      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0ea      	b.n	8004872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046a4:	4b30      	ldr	r3, [pc, #192]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0de      	b.n	8004872 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046b4:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0d6      	b.n	8004872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046c4:	4b28      	ldr	r3, [pc, #160]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f023 0207 	bic.w	r2, r3, #7
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4925      	ldr	r1, [pc, #148]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d6:	f7fc fc77 	bl	8000fc8 <HAL_GetTick>
 80046da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046dc:	e00a      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046de:	f7fc fc73 	bl	8000fc8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e0be      	b.n	8004872 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f4:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	429a      	cmp	r2, r3
 8004704:	d1eb      	bne.n	80046de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	429a      	cmp	r2, r3
 8004720:	d208      	bcs.n	8004734 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f023 020f 	bic.w	r2, r3, #15
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	490e      	ldr	r1, [pc, #56]	; (8004768 <HAL_RCC_ClockConfig+0x244>)
 8004730:	4313      	orrs	r3, r2
 8004732:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_ClockConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d214      	bcs.n	800476c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <HAL_RCC_ClockConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 020f 	bic.w	r2, r3, #15
 800474a:	4906      	ldr	r1, [pc, #24]	; (8004764 <HAL_RCC_ClockConfig+0x240>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b04      	ldr	r3, [pc, #16]	; (8004764 <HAL_RCC_ClockConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e086      	b.n	8004872 <HAL_RCC_ClockConfig+0x34e>
 8004764:	52002000 	.word	0x52002000
 8004768:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004784:	429a      	cmp	r2, r3
 8004786:	d208      	bcs.n	800479a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004788:	4b3c      	ldr	r3, [pc, #240]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	4939      	ldr	r1, [pc, #228]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 8004796:	4313      	orrs	r3, r2
 8004798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d010      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d208      	bcs.n	80047c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047b6:	4b31      	ldr	r3, [pc, #196]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	492e      	ldr	r1, [pc, #184]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	4b28      	ldr	r3, [pc, #160]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d208      	bcs.n	80047f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047e4:	4b25      	ldr	r3, [pc, #148]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	4922      	ldr	r1, [pc, #136]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d010      	beq.n	8004824 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800480e:	429a      	cmp	r2, r3
 8004810:	d208      	bcs.n	8004824 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004812:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4917      	ldr	r1, [pc, #92]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 8004820:	4313      	orrs	r3, r2
 8004822:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004824:	f000 f834 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b14      	ldr	r3, [pc, #80]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	4912      	ldr	r1, [pc, #72]	; (8004880 <HAL_RCC_ClockConfig+0x35c>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <HAL_RCC_ClockConfig+0x358>)
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	4a0d      	ldr	r2, [pc, #52]	; (8004880 <HAL_RCC_ClockConfig+0x35c>)
 800484c:	5cd3      	ldrb	r3, [r2, r3]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <HAL_RCC_ClockConfig+0x360>)
 800485a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_RCC_ClockConfig+0x364>)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <HAL_RCC_ClockConfig+0x368>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fc fb64 	bl	8000f34 <HAL_InitTick>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	58024400 	.word	0x58024400
 8004880:	08006404 	.word	0x08006404
 8004884:	24000004 	.word	0x24000004
 8004888:	24000000 	.word	0x24000000
 800488c:	24000008 	.word	0x24000008

08004890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004896:	4bb3      	ldr	r3, [pc, #716]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800489e:	2b18      	cmp	r3, #24
 80048a0:	f200 8155 	bhi.w	8004b4e <HAL_RCC_GetSysClockFreq+0x2be>
 80048a4:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	08004911 	.word	0x08004911
 80048b0:	08004b4f 	.word	0x08004b4f
 80048b4:	08004b4f 	.word	0x08004b4f
 80048b8:	08004b4f 	.word	0x08004b4f
 80048bc:	08004b4f 	.word	0x08004b4f
 80048c0:	08004b4f 	.word	0x08004b4f
 80048c4:	08004b4f 	.word	0x08004b4f
 80048c8:	08004b4f 	.word	0x08004b4f
 80048cc:	08004937 	.word	0x08004937
 80048d0:	08004b4f 	.word	0x08004b4f
 80048d4:	08004b4f 	.word	0x08004b4f
 80048d8:	08004b4f 	.word	0x08004b4f
 80048dc:	08004b4f 	.word	0x08004b4f
 80048e0:	08004b4f 	.word	0x08004b4f
 80048e4:	08004b4f 	.word	0x08004b4f
 80048e8:	08004b4f 	.word	0x08004b4f
 80048ec:	0800493d 	.word	0x0800493d
 80048f0:	08004b4f 	.word	0x08004b4f
 80048f4:	08004b4f 	.word	0x08004b4f
 80048f8:	08004b4f 	.word	0x08004b4f
 80048fc:	08004b4f 	.word	0x08004b4f
 8004900:	08004b4f 	.word	0x08004b4f
 8004904:	08004b4f 	.word	0x08004b4f
 8004908:	08004b4f 	.word	0x08004b4f
 800490c:	08004943 	.word	0x08004943
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004910:	4b94      	ldr	r3, [pc, #592]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d009      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800491c:	4b91      	ldr	r3, [pc, #580]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	08db      	lsrs	r3, r3, #3
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	4a90      	ldr	r2, [pc, #576]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
 800492c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800492e:	e111      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004930:	4b8d      	ldr	r3, [pc, #564]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004932:	61bb      	str	r3, [r7, #24]
      break;
 8004934:	e10e      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004936:	4b8d      	ldr	r3, [pc, #564]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004938:	61bb      	str	r3, [r7, #24]
      break;
 800493a:	e10b      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800493c:	4b8c      	ldr	r3, [pc, #560]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800493e:	61bb      	str	r3, [r7, #24]
      break;
 8004940:	e108      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004942:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800494c:	4b85      	ldr	r3, [pc, #532]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004956:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004958:	4b82      	ldr	r3, [pc, #520]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004962:	4b80      	ldr	r3, [pc, #512]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	08db      	lsrs	r3, r3, #3
 8004968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80e1 	beq.w	8004b48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b02      	cmp	r3, #2
 800498a:	f000 8083 	beq.w	8004a94 <HAL_RCC_GetSysClockFreq+0x204>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b02      	cmp	r3, #2
 8004992:	f200 80a1 	bhi.w	8004ad8 <HAL_RCC_GetSysClockFreq+0x248>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x114>
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d056      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049a2:	e099      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a4:	4b6f      	ldr	r3, [pc, #444]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02d      	beq.n	8004a0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049b0:	4b6c      	ldr	r3, [pc, #432]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	08db      	lsrs	r3, r3, #3
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	4a6b      	ldr	r2, [pc, #428]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
 80049c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	4b62      	ldr	r3, [pc, #392]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a0a:	e087      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004b78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b51      	ldr	r3, [pc, #324]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a4e:	e065      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b40      	ldr	r3, [pc, #256]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a92:	e043      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004b80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ad6:	e021      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004afe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	0a5b      	lsrs	r3, r3, #9
 8004b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b26:	3301      	adds	r3, #1
 8004b28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b40:	ee17 3a90 	vmov	r3, s15
 8004b44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b46:	e005      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61bb      	str	r3, [r7, #24]
      break;
 8004b4c:	e002      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b50:	61bb      	str	r3, [r7, #24]
      break;
 8004b52:	bf00      	nop
  }

  return sysclockfreq;
 8004b54:	69bb      	ldr	r3, [r7, #24]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3724      	adds	r7, #36	; 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	58024400 	.word	0x58024400
 8004b68:	03d09000 	.word	0x03d09000
 8004b6c:	003d0900 	.word	0x003d0900
 8004b70:	017d7840 	.word	0x017d7840
 8004b74:	46000000 	.word	0x46000000
 8004b78:	4c742400 	.word	0x4c742400
 8004b7c:	4a742400 	.word	0x4a742400
 8004b80:	4bbebc20 	.word	0x4bbebc20

08004b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e049      	b.n	8004c2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc f810 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f000 fea6 	bl	8005914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e049      	b.n	8004cd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f841 	bl	8004ce0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f000 fe4f 	bl	8005914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e03c      	b.n	8004d9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d109      	bne.n	8004d3a <HAL_TIM_PWM_Start_DMA+0x46>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e02f      	b.n	8004d9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d109      	bne.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x60>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e022      	b.n	8004d9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d109      	bne.n	8004d6e <HAL_TIM_PWM_Start_DMA+0x7a>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e015      	b.n	8004d9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d109      	bne.n	8004d88 <HAL_TIM_PWM_Start_DMA+0x94>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e008      	b.n	8004d9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e1b0      	b.n	8005104 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <HAL_TIM_PWM_Start_DMA+0xc8>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	bf0c      	ite	eq
 8004db4:	2301      	moveq	r3, #1
 8004db6:	2300      	movne	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e03c      	b.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x142>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d109      	bne.n	8004dd6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	bf0c      	ite	eq
 8004dce:	2301      	moveq	r3, #1
 8004dd0:	2300      	movne	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	e02f      	b.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x142>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d109      	bne.n	8004df0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e022      	b.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x142>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d109      	bne.n	8004e0a <HAL_TIM_PWM_Start_DMA+0x116>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	e015      	b.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x142>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d109      	bne.n	8004e24 <HAL_TIM_PWM_Start_DMA+0x130>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e008      	b.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x142>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d034      	beq.n	8004ea4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_TIM_PWM_Start_DMA+0x152>
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e15c      	b.n	8005104 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start_DMA+0x166>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	e026      	b.n	8004ea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Start_DMA+0x176>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e68:	e01e      	b.n	8004ea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start_DMA+0x186>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e78:	e016      	b.n	8004ea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_PWM_Start_DMA+0x196>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e88:	e00e      	b.n	8004ea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	e006      	b.n	8004ea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea2:	e001      	b.n	8004ea8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e12d      	b.n	8005104 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b0c      	cmp	r3, #12
 8004eac:	f200 80ae 	bhi.w	800500c <HAL_TIM_PWM_Start_DMA+0x318>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004eed 	.word	0x08004eed
 8004ebc:	0800500d 	.word	0x0800500d
 8004ec0:	0800500d 	.word	0x0800500d
 8004ec4:	0800500d 	.word	0x0800500d
 8004ec8:	08004f35 	.word	0x08004f35
 8004ecc:	0800500d 	.word	0x0800500d
 8004ed0:	0800500d 	.word	0x0800500d
 8004ed4:	0800500d 	.word	0x0800500d
 8004ed8:	08004f7d 	.word	0x08004f7d
 8004edc:	0800500d 	.word	0x0800500d
 8004ee0:	0800500d 	.word	0x0800500d
 8004ee4:	0800500d 	.word	0x0800500d
 8004ee8:	08004fc5 	.word	0x08004fc5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	4a86      	ldr	r2, [pc, #536]	; (800510c <HAL_TIM_PWM_Start_DMA+0x418>)
 8004ef2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	4a85      	ldr	r2, [pc, #532]	; (8005110 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	4a84      	ldr	r2, [pc, #528]	; (8005114 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004f02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3334      	adds	r3, #52	; 0x34
 8004f10:	461a      	mov	r2, r3
 8004f12:	887b      	ldrh	r3, [r7, #2]
 8004f14:	f7fc fd00 	bl	8001918 <HAL_DMA_Start_IT>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0f0      	b.n	8005104 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f30:	60da      	str	r2, [r3, #12]
      break;
 8004f32:	e06e      	b.n	8005012 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	4a74      	ldr	r2, [pc, #464]	; (800510c <HAL_TIM_PWM_Start_DMA+0x418>)
 8004f3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	4a73      	ldr	r2, [pc, #460]	; (8005110 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	4a72      	ldr	r2, [pc, #456]	; (8005114 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004f4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3338      	adds	r3, #56	; 0x38
 8004f58:	461a      	mov	r2, r3
 8004f5a:	887b      	ldrh	r3, [r7, #2]
 8004f5c:	f7fc fcdc 	bl	8001918 <HAL_DMA_Start_IT>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e0cc      	b.n	8005104 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f78:	60da      	str	r2, [r3, #12]
      break;
 8004f7a:	e04a      	b.n	8005012 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	4a62      	ldr	r2, [pc, #392]	; (800510c <HAL_TIM_PWM_Start_DMA+0x418>)
 8004f82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4a61      	ldr	r2, [pc, #388]	; (8005110 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a60      	ldr	r2, [pc, #384]	; (8005114 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004f92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	333c      	adds	r3, #60	; 0x3c
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	887b      	ldrh	r3, [r7, #2]
 8004fa4:	f7fc fcb8 	bl	8001918 <HAL_DMA_Start_IT>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0a8      	b.n	8005104 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc0:	60da      	str	r2, [r3, #12]
      break;
 8004fc2:	e026      	b.n	8005012 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	4a50      	ldr	r2, [pc, #320]	; (800510c <HAL_TIM_PWM_Start_DMA+0x418>)
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	4a4f      	ldr	r2, [pc, #316]	; (8005110 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	4a4e      	ldr	r2, [pc, #312]	; (8005114 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004fda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3340      	adds	r3, #64	; 0x40
 8004fe8:	461a      	mov	r2, r3
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	f7fc fc94 	bl	8001918 <HAL_DMA_Start_IT>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e084      	b.n	8005104 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005008:	60da      	str	r2, [r3, #12]
      break;
 800500a:	e002      	b.n	8005012 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	75fb      	strb	r3, [r7, #23]
      break;
 8005010:	bf00      	nop
  }

  if (status == HAL_OK)
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d174      	bne.n	8005102 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	4618      	mov	r0, r3
 8005022:	f001 f885 	bl	8006130 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3b      	ldr	r2, [pc, #236]	; (8005118 <HAL_TIM_PWM_Start_DMA+0x424>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <HAL_TIM_PWM_Start_DMA+0x364>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a39      	ldr	r2, [pc, #228]	; (800511c <HAL_TIM_PWM_Start_DMA+0x428>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <HAL_TIM_PWM_Start_DMA+0x364>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a38      	ldr	r2, [pc, #224]	; (8005120 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_TIM_PWM_Start_DMA+0x364>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a36      	ldr	r2, [pc, #216]	; (8005124 <HAL_TIM_PWM_Start_DMA+0x430>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIM_PWM_Start_DMA+0x364>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a35      	ldr	r2, [pc, #212]	; (8005128 <HAL_TIM_PWM_Start_DMA+0x434>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <HAL_TIM_PWM_Start_DMA+0x368>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <HAL_TIM_PWM_Start_DMA+0x36a>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005070:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a28      	ldr	r2, [pc, #160]	; (8005118 <HAL_TIM_PWM_Start_DMA+0x424>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d01d      	beq.n	80050c2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a28      	ldr	r2, [pc, #160]	; (800512c <HAL_TIM_PWM_Start_DMA+0x438>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a26      	ldr	r2, [pc, #152]	; (8005130 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a25      	ldr	r2, [pc, #148]	; (8005134 <HAL_TIM_PWM_Start_DMA+0x440>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	; (800511c <HAL_TIM_PWM_Start_DMA+0x428>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a21      	ldr	r2, [pc, #132]	; (8005138 <HAL_TIM_PWM_Start_DMA+0x444>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a18      	ldr	r2, [pc, #96]	; (8005120 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d115      	bne.n	80050ee <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	4b1c      	ldr	r3, [pc, #112]	; (800513c <HAL_TIM_PWM_Start_DMA+0x448>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d015      	beq.n	8005100 <HAL_TIM_PWM_Start_DMA+0x40c>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050da:	d011      	beq.n	8005100 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	e008      	b.n	8005100 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e000      	b.n	8005102 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	08005803 	.word	0x08005803
 8005110:	080058ab 	.word	0x080058ab
 8005114:	08005771 	.word	0x08005771
 8005118:	40010000 	.word	0x40010000
 800511c:	40010400 	.word	0x40010400
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40001800 	.word	0x40001800
 800513c:	00010007 	.word	0x00010007

08005140 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b0c      	cmp	r3, #12
 8005152:	d855      	bhi.n	8005200 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005154:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005191 	.word	0x08005191
 8005160:	08005201 	.word	0x08005201
 8005164:	08005201 	.word	0x08005201
 8005168:	08005201 	.word	0x08005201
 800516c:	080051ad 	.word	0x080051ad
 8005170:	08005201 	.word	0x08005201
 8005174:	08005201 	.word	0x08005201
 8005178:	08005201 	.word	0x08005201
 800517c:	080051c9 	.word	0x080051c9
 8005180:	08005201 	.word	0x08005201
 8005184:	08005201 	.word	0x08005201
 8005188:	08005201 	.word	0x08005201
 800518c:	080051e5 	.word	0x080051e5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800519e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fc fe21 	bl	8001dec <HAL_DMA_Abort_IT>
      break;
 80051aa:	e02c      	b.n	8005206 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fc fe13 	bl	8001dec <HAL_DMA_Abort_IT>
      break;
 80051c6:	e01e      	b.n	8005206 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fc fe05 	bl	8001dec <HAL_DMA_Abort_IT>
      break;
 80051e2:	e010      	b.n	8005206 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fc fdf7 	bl	8001dec <HAL_DMA_Abort_IT>
      break;
 80051fe:	e002      	b.n	8005206 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
      break;
 8005204:	bf00      	nop
  }

  if (status == HAL_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 8081 	bne.w	8005310 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 ff8a 	bl	8006130 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a3e      	ldr	r2, [pc, #248]	; (800531c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d013      	beq.n	800524e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a3d      	ldr	r2, [pc, #244]	; (8005320 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a3b      	ldr	r2, [pc, #236]	; (8005324 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a3a      	ldr	r2, [pc, #232]	; (8005328 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a38      	ldr	r2, [pc, #224]	; (800532c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <HAL_TIM_PWM_Stop_DMA+0x112>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d017      	beq.n	8005288 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10f      	bne.n	8005288 <HAL_TIM_PWM_Stop_DMA+0x148>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	f240 4344 	movw	r3, #1092	; 0x444
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_TIM_PWM_Stop_DMA+0x148>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005292:	4013      	ands	r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10f      	bne.n	80052b8 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	f240 4344 	movw	r3, #1092	; 0x444
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d107      	bne.n	80052b8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c6:	e023      	b.n	8005310 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d104      	bne.n	80052d8 <HAL_TIM_PWM_Stop_DMA+0x198>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d6:	e01b      	b.n	8005310 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e6:	e013      	b.n	8005310 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d104      	bne.n	80052f8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f6:	e00b      	b.n	8005310 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d104      	bne.n	8005308 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005306:	e003      	b.n	8005310 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40010400 	.word	0x40010400
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800

08005330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800534a:	2302      	movs	r3, #2
 800534c:	e0ff      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b14      	cmp	r3, #20
 800535a:	f200 80f0 	bhi.w	800553e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	080053b9 	.word	0x080053b9
 8005368:	0800553f 	.word	0x0800553f
 800536c:	0800553f 	.word	0x0800553f
 8005370:	0800553f 	.word	0x0800553f
 8005374:	080053f9 	.word	0x080053f9
 8005378:	0800553f 	.word	0x0800553f
 800537c:	0800553f 	.word	0x0800553f
 8005380:	0800553f 	.word	0x0800553f
 8005384:	0800543b 	.word	0x0800543b
 8005388:	0800553f 	.word	0x0800553f
 800538c:	0800553f 	.word	0x0800553f
 8005390:	0800553f 	.word	0x0800553f
 8005394:	0800547b 	.word	0x0800547b
 8005398:	0800553f 	.word	0x0800553f
 800539c:	0800553f 	.word	0x0800553f
 80053a0:	0800553f 	.word	0x0800553f
 80053a4:	080054bd 	.word	0x080054bd
 80053a8:	0800553f 	.word	0x0800553f
 80053ac:	0800553f 	.word	0x0800553f
 80053b0:	0800553f 	.word	0x0800553f
 80053b4:	080054fd 	.word	0x080054fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fb42 	bl	8005a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0208 	orr.w	r2, r2, #8
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0204 	bic.w	r2, r2, #4
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	619a      	str	r2, [r3, #24]
      break;
 80053f6:	e0a5      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fbb2 	bl	8005b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6999      	ldr	r1, [r3, #24]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	021a      	lsls	r2, r3, #8
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	619a      	str	r2, [r3, #24]
      break;
 8005438:	e084      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fc1b 	bl	8005c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0208 	orr.w	r2, r2, #8
 8005454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0204 	bic.w	r2, r2, #4
 8005464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	61da      	str	r2, [r3, #28]
      break;
 8005478:	e064      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fc83 	bl	8005d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69d9      	ldr	r1, [r3, #28]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	021a      	lsls	r2, r3, #8
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	61da      	str	r2, [r3, #28]
      break;
 80054ba:	e043      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fccc 	bl	8005e60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0208 	orr.w	r2, r2, #8
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0204 	bic.w	r2, r2, #4
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054fa:	e023      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fd10 	bl	8005f28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005516:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	021a      	lsls	r2, r3, #8
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800553c:	e002      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	75fb      	strb	r3, [r7, #23]
      break;
 8005542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop

08005558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIM_ConfigClockSource+0x1c>
 8005570:	2302      	movs	r3, #2
 8005572:	e0dc      	b.n	800572e <HAL_TIM_ConfigClockSource+0x1d6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	4b6a      	ldr	r3, [pc, #424]	; (8005738 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005590:	4013      	ands	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a64      	ldr	r2, [pc, #400]	; (800573c <HAL_TIM_ConfigClockSource+0x1e4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f000 80a9 	beq.w	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 80055b0:	4a62      	ldr	r2, [pc, #392]	; (800573c <HAL_TIM_ConfigClockSource+0x1e4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f200 80ae 	bhi.w	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 80055b8:	4a61      	ldr	r2, [pc, #388]	; (8005740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f000 80a1 	beq.w	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 80055c0:	4a5f      	ldr	r2, [pc, #380]	; (8005740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f200 80a6 	bhi.w	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 80055c8:	4a5e      	ldr	r2, [pc, #376]	; (8005744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f000 8099 	beq.w	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 80055d0:	4a5c      	ldr	r2, [pc, #368]	; (8005744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f200 809e 	bhi.w	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 80055d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055dc:	f000 8091 	beq.w	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 80055e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055e4:	f200 8096 	bhi.w	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 80055e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ec:	f000 8089 	beq.w	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 80055f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f4:	f200 808e 	bhi.w	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 80055f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fc:	d03e      	beq.n	800567c <HAL_TIM_ConfigClockSource+0x124>
 80055fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005602:	f200 8087 	bhi.w	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	f000 8086 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x1c2>
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005612:	d87f      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 8005614:	2b70      	cmp	r3, #112	; 0x70
 8005616:	d01a      	beq.n	800564e <HAL_TIM_ConfigClockSource+0xf6>
 8005618:	2b70      	cmp	r3, #112	; 0x70
 800561a:	d87b      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 800561c:	2b60      	cmp	r3, #96	; 0x60
 800561e:	d050      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x16a>
 8005620:	2b60      	cmp	r3, #96	; 0x60
 8005622:	d877      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 8005624:	2b50      	cmp	r3, #80	; 0x50
 8005626:	d03c      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x14a>
 8005628:	2b50      	cmp	r3, #80	; 0x50
 800562a:	d873      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d058      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x18a>
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d86f      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 8005634:	2b30      	cmp	r3, #48	; 0x30
 8005636:	d064      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	d86b      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 800563c:	2b20      	cmp	r3, #32
 800563e:	d060      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d867      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d05c      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 8005648:	2b10      	cmp	r3, #16
 800564a:	d05a      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x1aa>
 800564c:	e062      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6899      	ldr	r1, [r3, #8]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f000 fd47 	bl	80060f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	609a      	str	r2, [r3, #8]
      break;
 800567a:	e04f      	b.n	800571c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6899      	ldr	r1, [r3, #8]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f000 fd30 	bl	80060f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800569e:	609a      	str	r2, [r3, #8]
      break;
 80056a0:	e03c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f000 fca0 	bl	8005ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2150      	movs	r1, #80	; 0x50
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fcfa 	bl	80060b4 <TIM_ITRx_SetConfig>
      break;
 80056c0:	e02c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fcbf 	bl	8006052 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2160      	movs	r1, #96	; 0x60
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fcea 	bl	80060b4 <TIM_ITRx_SetConfig>
      break;
 80056e0:	e01c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f000 fc80 	bl	8005ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2140      	movs	r1, #64	; 0x40
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fcda 	bl	80060b4 <TIM_ITRx_SetConfig>
      break;
 8005700:	e00c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f000 fcd1 	bl	80060b4 <TIM_ITRx_SetConfig>
      break;
 8005712:	e003      	b.n	800571c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      break;
 8005718:	e000      	b.n	800571c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800571a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	ffceff88 	.word	0xffceff88
 800573c:	00100040 	.word	0x00100040
 8005740:	00100030 	.word	0x00100030
 8005744:	00100020 	.word	0x00100020

08005748 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d107      	bne.n	8005798 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005796:	e02a      	b.n	80057ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d107      	bne.n	80057b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2202      	movs	r2, #2
 80057a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b0:	e01d      	b.n	80057ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d107      	bne.n	80057cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2204      	movs	r2, #4
 80057c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ca:	e010      	b.n	80057ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d107      	bne.n	80057e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2208      	movs	r2, #8
 80057da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e4:	e003      	b.n	80057ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff ffb4 	bl	800575c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	771a      	strb	r2, [r3, #28]
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d10b      	bne.n	8005832 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d136      	bne.n	8005896 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005830:	e031      	b.n	8005896 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d10b      	bne.n	8005854 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2202      	movs	r2, #2
 8005840:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d125      	bne.n	8005896 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005852:	e020      	b.n	8005896 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d10b      	bne.n	8005876 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2204      	movs	r2, #4
 8005862:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d114      	bne.n	8005896 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005874:	e00f      	b.n	8005896 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d10a      	bne.n	8005896 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2208      	movs	r2, #8
 8005884:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7fa fd1e 	bl	80002d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d103      	bne.n	80058ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	771a      	strb	r2, [r3, #28]
 80058c8:	e019      	b.n	80058fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d103      	bne.n	80058dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2202      	movs	r2, #2
 80058d8:	771a      	strb	r2, [r3, #28]
 80058da:	e010      	b.n	80058fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d103      	bne.n	80058ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2204      	movs	r2, #4
 80058ea:	771a      	strb	r2, [r3, #28]
 80058ec:	e007      	b.n	80058fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d102      	bne.n	80058fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2208      	movs	r2, #8
 80058fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7ff ff22 	bl	8005748 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	771a      	strb	r2, [r3, #28]
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a40      	ldr	r2, [pc, #256]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d00f      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a3d      	ldr	r2, [pc, #244]	; (8005a2c <TIM_Base_SetConfig+0x118>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a3c      	ldr	r2, [pc, #240]	; (8005a30 <TIM_Base_SetConfig+0x11c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a3b      	ldr	r2, [pc, #236]	; (8005a34 <TIM_Base_SetConfig+0x120>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3a      	ldr	r2, [pc, #232]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d108      	bne.n	8005966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2f      	ldr	r2, [pc, #188]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01f      	beq.n	80059ae <TIM_Base_SetConfig+0x9a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d01b      	beq.n	80059ae <TIM_Base_SetConfig+0x9a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <TIM_Base_SetConfig+0x118>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d017      	beq.n	80059ae <TIM_Base_SetConfig+0x9a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2b      	ldr	r2, [pc, #172]	; (8005a30 <TIM_Base_SetConfig+0x11c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <TIM_Base_SetConfig+0x9a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2a      	ldr	r2, [pc, #168]	; (8005a34 <TIM_Base_SetConfig+0x120>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_Base_SetConfig+0x9a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_Base_SetConfig+0x9a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <TIM_Base_SetConfig+0x128>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_Base_SetConfig+0x9a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <TIM_Base_SetConfig+0x12c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_Base_SetConfig+0x9a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <TIM_Base_SetConfig+0x130>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a10      	ldr	r2, [pc, #64]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0xf8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0xf8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a11      	ldr	r2, [pc, #68]	; (8005a3c <TIM_Base_SetConfig+0x128>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0xf8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a10      	ldr	r2, [pc, #64]	; (8005a40 <TIM_Base_SetConfig+0x12c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0xf8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a0f      	ldr	r2, [pc, #60]	; (8005a44 <TIM_Base_SetConfig+0x130>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d103      	bne.n	8005a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	615a      	str	r2, [r3, #20]
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40010400 	.word	0x40010400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800

08005a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <TIM_OC1_SetConfig+0x108>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 0302 	bic.w	r3, r3, #2
 8005a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a2d      	ldr	r2, [pc, #180]	; (8005b54 <TIM_OC1_SetConfig+0x10c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x7c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a2c      	ldr	r2, [pc, #176]	; (8005b58 <TIM_OC1_SetConfig+0x110>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x7c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <TIM_OC1_SetConfig+0x114>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x7c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a2a      	ldr	r2, [pc, #168]	; (8005b60 <TIM_OC1_SetConfig+0x118>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x7c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a29      	ldr	r2, [pc, #164]	; (8005b64 <TIM_OC1_SetConfig+0x11c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10c      	bne.n	8005ade <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0308 	bic.w	r3, r3, #8
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <TIM_OC1_SetConfig+0x10c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00f      	beq.n	8005b06 <TIM_OC1_SetConfig+0xbe>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <TIM_OC1_SetConfig+0x110>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <TIM_OC1_SetConfig+0xbe>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <TIM_OC1_SetConfig+0x114>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d007      	beq.n	8005b06 <TIM_OC1_SetConfig+0xbe>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <TIM_OC1_SetConfig+0x118>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <TIM_OC1_SetConfig+0xbe>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <TIM_OC1_SetConfig+0x11c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d111      	bne.n	8005b2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	621a      	str	r2, [r3, #32]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	fffeff8f 	.word	0xfffeff8f
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800

08005b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f023 0210 	bic.w	r2, r3, #16
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <TIM_OC2_SetConfig+0xfc>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f023 0320 	bic.w	r3, r3, #32
 8005bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <TIM_OC2_SetConfig+0x100>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_OC2_SetConfig+0x68>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a28      	ldr	r2, [pc, #160]	; (8005c6c <TIM_OC2_SetConfig+0x104>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d10d      	bne.n	8005bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <TIM_OC2_SetConfig+0x100>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00f      	beq.n	8005c14 <TIM_OC2_SetConfig+0xac>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <TIM_OC2_SetConfig+0x104>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <TIM_OC2_SetConfig+0xac>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <TIM_OC2_SetConfig+0x108>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d007      	beq.n	8005c14 <TIM_OC2_SetConfig+0xac>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <TIM_OC2_SetConfig+0x10c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_OC2_SetConfig+0xac>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1a      	ldr	r2, [pc, #104]	; (8005c78 <TIM_OC2_SetConfig+0x110>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d113      	bne.n	8005c3c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	feff8fff 	.word	0xfeff8fff
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40010400 	.word	0x40010400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4b33      	ldr	r3, [pc, #204]	; (8005d74 <TIM_OC3_SetConfig+0xf8>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <TIM_OC3_SetConfig+0xfc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x66>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <TIM_OC3_SetConfig+0x100>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10d      	bne.n	8005cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <TIM_OC3_SetConfig+0xfc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00f      	beq.n	8005d26 <TIM_OC3_SetConfig+0xaa>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <TIM_OC3_SetConfig+0x100>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <TIM_OC3_SetConfig+0xaa>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <TIM_OC3_SetConfig+0x104>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <TIM_OC3_SetConfig+0xaa>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <TIM_OC3_SetConfig+0x108>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d003      	beq.n	8005d26 <TIM_OC3_SetConfig+0xaa>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a19      	ldr	r2, [pc, #100]	; (8005d88 <TIM_OC3_SetConfig+0x10c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d113      	bne.n	8005d4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	621a      	str	r2, [r3, #32]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	fffeff8f 	.word	0xfffeff8f
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40014400 	.word	0x40014400
 8005d88:	40014800 	.word	0x40014800

08005d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <TIM_OC4_SetConfig+0xbc>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <TIM_OC4_SetConfig+0xc0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00f      	beq.n	8005e0c <TIM_OC4_SetConfig+0x80>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <TIM_OC4_SetConfig+0xc4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_OC4_SetConfig+0x80>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <TIM_OC4_SetConfig+0xc8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_OC4_SetConfig+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <TIM_OC4_SetConfig+0xcc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC4_SetConfig+0x80>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <TIM_OC4_SetConfig+0xd0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d109      	bne.n	8005e20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	feff8fff 	.word	0xfeff8fff
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800

08005e60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <TIM_OC5_SetConfig+0xb0>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	041b      	lsls	r3, r3, #16
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a18      	ldr	r2, [pc, #96]	; (8005f14 <TIM_OC5_SetConfig+0xb4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00f      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x76>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <TIM_OC5_SetConfig+0xb8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x76>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <TIM_OC5_SetConfig+0xbc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x76>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <TIM_OC5_SetConfig+0xc0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_OC5_SetConfig+0x76>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a14      	ldr	r2, [pc, #80]	; (8005f24 <TIM_OC5_SetConfig+0xc4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d109      	bne.n	8005eea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005edc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	621a      	str	r2, [r3, #32]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	fffeff8f 	.word	0xfffeff8f
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40014400 	.word	0x40014400
 8005f24:	40014800 	.word	0x40014800

08005f28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4b22      	ldr	r3, [pc, #136]	; (8005fdc <TIM_OC6_SetConfig+0xb4>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	051b      	lsls	r3, r3, #20
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <TIM_OC6_SetConfig+0xb8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x78>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a18      	ldr	r2, [pc, #96]	; (8005fe4 <TIM_OC6_SetConfig+0xbc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x78>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a17      	ldr	r2, [pc, #92]	; (8005fe8 <TIM_OC6_SetConfig+0xc0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x78>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a16      	ldr	r2, [pc, #88]	; (8005fec <TIM_OC6_SetConfig+0xc4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x78>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <TIM_OC6_SetConfig+0xc8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d109      	bne.n	8005fb4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	feff8fff 	.word	0xfeff8fff
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40010400 	.word	0x40010400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40014400 	.word	0x40014400
 8005ff0:	40014800 	.word	0x40014800

08005ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f023 0201 	bic.w	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800601e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f023 030a 	bic.w	r3, r3, #10
 8006030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006052:	b480      	push	{r7}
 8006054:	b087      	sub	sp, #28
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0210 	bic.w	r2, r3, #16
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800607c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	031b      	lsls	r3, r3, #12
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800608e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <TIM_ITRx_SetConfig+0x38>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f043 0307 	orr.w	r3, r3, #7
 80060d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	609a      	str	r2, [r3, #8]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	ffcfff8f 	.word	0xffcfff8f

080060f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800610a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	021a      	lsls	r2, r3, #8
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	431a      	orrs	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4313      	orrs	r3, r2
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	609a      	str	r2, [r3, #8]
}
 8006124:	bf00      	nop
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	2201      	movs	r2, #1
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1a      	ldr	r2, [r3, #32]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	43db      	mvns	r3, r3
 8006152:	401a      	ands	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	fa01 f303 	lsl.w	r3, r1, r3
 8006168:	431a      	orrs	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006190:	2302      	movs	r3, #2
 8006192:	e06d      	b.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a30      	ldr	r2, [pc, #192]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d108      	bne.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a20      	ldr	r2, [pc, #128]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d022      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d01d      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1a      	ldr	r2, [pc, #104]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a15      	ldr	r2, [pc, #84]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a16      	ldr	r2, [pc, #88]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a15      	ldr	r2, [pc, #84]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10c      	bne.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	4313      	orrs	r3, r2
 8006254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40010000 	.word	0x40010000
 8006280:	40010400 	.word	0x40010400
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40001800 	.word	0x40001800
 8006294:	40014000 	.word	0x40014000

08006298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e065      	b.n	8006380 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	041b      	lsls	r3, r3, #16
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a14      	ldr	r2, [pc, #80]	; (8006390 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d115      	bne.n	800636e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40010000 	.word	0x40010000
 8006390:	40010400 	.word	0x40010400

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4d0d      	ldr	r5, [pc, #52]	; (80063cc <__libc_init_array+0x38>)
 8006398:	4c0d      	ldr	r4, [pc, #52]	; (80063d0 <__libc_init_array+0x3c>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	2600      	movs	r6, #0
 80063a0:	42a6      	cmp	r6, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	4d0b      	ldr	r5, [pc, #44]	; (80063d4 <__libc_init_array+0x40>)
 80063a6:	4c0c      	ldr	r4, [pc, #48]	; (80063d8 <__libc_init_array+0x44>)
 80063a8:	f000 f820 	bl	80063ec <_init>
 80063ac:	1b64      	subs	r4, r4, r5
 80063ae:	10a4      	asrs	r4, r4, #2
 80063b0:	2600      	movs	r6, #0
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063bc:	4798      	blx	r3
 80063be:	3601      	adds	r6, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c6:	4798      	blx	r3
 80063c8:	3601      	adds	r6, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	0800641c 	.word	0x0800641c
 80063d0:	0800641c 	.word	0x0800641c
 80063d4:	0800641c 	.word	0x0800641c
 80063d8:	08006420 	.word	0x08006420

080063dc <memset>:
 80063dc:	4402      	add	r2, r0
 80063de:	4603      	mov	r3, r0
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d100      	bne.n	80063e6 <memset+0xa>
 80063e4:	4770      	bx	lr
 80063e6:	f803 1b01 	strb.w	r1, [r3], #1
 80063ea:	e7f9      	b.n	80063e0 <memset+0x4>

080063ec <_init>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr

080063f8 <_fini>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr
